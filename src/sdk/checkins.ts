/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { checkinsCount } from "../funcs/checkinsCount.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Appointment } from "./appointment.js";
import { Class } from "./class.js";
import { Event } from "./event.js";
import { Open } from "./open.js";

export class Checkins extends ClientSDK {
  private _event?: Event;
  get event(): Event {
    return (this._event ??= new Event(this._options));
  }

  private _class?: Class;
  get class(): Class {
    return (this._class ??= new Class(this._options));
  }

  private _open?: Open;
  get open(): Open {
    return (this._open ??= new Open(this._options));
  }

  private _appointment?: Appointment;
  get appointment(): Appointment {
    return (this._appointment ??= new Appointment(this._options));
  }

  /**
   * Get Checkin Count
   *
   * @remarks
   * Get a count of checkins based on filter criteria, including event, customer and time range
   */
  async count(
    request: operations.CountCheckinsRequest,
    options?: RequestOptions,
  ): Promise<operations.CountCheckinsResponseBody> {
    return unwrapAsync(checkinsCount(
      this,
      request,
      options,
    ));
  }
}
