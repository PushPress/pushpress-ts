/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksActivate } from "../funcs/webhooksActivate.js";
import { webhooksCreate } from "../funcs/webhooksCreate.js";
import { webhooksDelete } from "../funcs/webhooksDelete.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksList } from "../funcs/webhooksList.js";
import { webhooksRotateSecret } from "../funcs/webhooksRotateSecret.js";
import { webhooksUpdate } from "../funcs/webhooksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * Create a Platform Webhook
   *
   * @remarks
   * Create a platform webhook that can be used to listen for events on the pushpress platform at a given URL
   */
  async create(
    request: operations.CreateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateWebhookResponseBody> {
    return unwrapAsync(webhooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Platform Webhooks
   *
   * @remarks
   * List platform webhooks for the current customer, including the signing secret and event subscriptions
   */
  async list(
    request: operations.ListWebhooksRequest,
    options?: RequestOptions,
  ): Promise<operations.ListWebhooksResponseBody> {
    return unwrapAsync(webhooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Platform Webhook
   *
   * @remarks
   * Get the details for a platform webhook including the signing secret and event subscriptions
   */
  async get(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWebhookResponseBody> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Platform Webhook
   *
   * @remarks
   * Update the details for a platform webhook including the signing secret an event subscriptions
   */
  async update(
    request: operations.UpdateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateWebhookResponseBody> {
    return unwrapAsync(webhooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Platform Webhook
   *
   * @remarks
   * Deregister a platform webhook
   */
  async delete(
    request: operations.DeleteWebhookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Activate a Platform Webhook
   *
   * @remarks
   * Activate a deleted platform webhook
   */
  async activate(
    request: operations.ActivateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.ActivateWebhookResponseBody> {
    return unwrapAsync(webhooksActivate(
      this,
      request,
      options,
    ));
  }

  /**
   * Rotate a Platform Webhook Signing Secret
   *
   * @remarks
   * Rotate a platform webhook's signing secret
   */
  async rotateSecret(
    request: operations.RotateWebhookSigningSecretRequest,
    options?: RequestOptions,
  ): Promise<operations.RotateWebhookSigningSecretResponseBody> {
    return unwrapAsync(webhooksRotateSecret(
      this,
      request,
      options,
    ));
  }
}
