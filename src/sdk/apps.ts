/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { appsDelete } from "../funcs/appsDelete.js";
import { appsGet } from "../funcs/appsGet.js";
import { appsInstall } from "../funcs/appsInstall.js";
import { appsList } from "../funcs/appsList.js";
import { appsUninstall } from "../funcs/appsUninstall.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Installs } from "./installs.js";

export class Apps extends ClientSDK {
  private _installs?: Installs;
  get installs(): Installs {
    return (this._installs ??= new Installs(this._options));
  }

  /**
   * List all available apps
   */
  async list(
    options?: RequestOptions,
  ): Promise<Array<components.App>> {
    return unwrapAsync(appsList(
      this,
      options,
    ));
  }

  /**
   * Get details of a specific app
   */
  async get(
    request: operations.GetAppRequest,
    options?: RequestOptions,
  ): Promise<components.App> {
    return unwrapAsync(appsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Install an app for a company
   */
  async install(
    request: operations.InstallAppRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(appsInstall(
      this,
      request,
      options,
    ));
  }

  /**
   * Soft uninstall an app (mark it as uninstalled but retain data)
   */
  async uninstall(
    request: operations.UninstallAppRequest,
    options?: RequestOptions,
  ): Promise<components.AppInstall> {
    return unwrapAsync(appsUninstall(
      this,
      request,
      options,
    ));
  }

  /**
   * Hard delete an app (remove all data)
   */
  async delete(
    request: operations.DeleteAppInstallRequest,
    options?: RequestOptions,
  ): Promise<components.AppInstall> {
    return unwrapAsync(appsDelete(
      this,
      request,
      options,
    ));
  }
}
