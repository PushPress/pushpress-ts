/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apiKeysDelete } from "../funcs/apiKeysDelete.js";
import { apiKeysGet } from "../funcs/apiKeysGet.js";
import { apiKeysRevoke } from "../funcs/apiKeysRevoke.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class APIKeys extends ClientSDK {
  /**
   * Get API Key
   *
   * @remarks
   * Fetches detailed information about a specific API key and associated metadata
   */
  async get(
    security: operations.GetApiKeySecurity,
    request: operations.GetApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ApiKey> {
    return unwrapAsync(apiKeysGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete an API Key
   *
   * @remarks
   * Immediately invalidates an active API key, preventing any further authentication attempts using this key. This is useful when a key may have been compromised or is no longer needed. This action cannot be undone - a new key must be generated if access is needed again.
   */
  async delete(
    security: operations.DeleteApiKeySecurity,
    request: operations.DeleteApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ApiKey> {
    return unwrapAsync(apiKeysDelete(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Revoke an API Key
   *
   * @remarks
   * Immediately invalidates an active API key, preventing any further authentication attempts using this key. This is useful when a key may have been compromised or is no longer needed. This action cannot be undone - a new key must be generated if access is needed again.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async revoke(
    security: operations.RevokeApiKeySecurity,
    request: operations.RevokeApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ApiKey> {
    return unwrapAsync(apiKeysRevoke(
      this,
      security,
      request,
      options,
    ));
  }
}
