/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Schema for checking in to an appointment, including relevant details such as customer and company information
 */
export type AppointmentCheckin = {
  /**
   * Unique identifier for the checkin record
   */
  id: string;
  /**
   * UUID of the customer who checked in
   */
  customer: string;
  /**
   * UUID of the company
   */
  company: string;
  /**
   * Unix timestamp representing the time of checkin
   */
  timestamp: number;
  /**
   * UUID of the enrollment record, null if the checkin is not associated with a plan enrollment
   */
  enrollmentId?: string | null | undefined;
  /**
   * The name or title of the appointment, if available
   */
  name?: string | undefined;
  /**
   * A constant value indicating the type of check-in, which is 'appointment'
   */
  kind?: "appointment" | undefined;
  /**
   * UUID for the checked in appointment
   */
  appointmentId: string;
  /**
   * The UUID representing the type or category of the appointment
   */
  typeId: string;
  /**
   * unique identifier for the staff member, corresponding to a customer with a staff role
   */
  staffId: string;
};

/** @internal */
export const AppointmentCheckin$inboundSchema: z.ZodType<
  AppointmentCheckin,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  customer: z.string(),
  company: z.string(),
  timestamp: z.number(),
  enrollmentId: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  kind: z.literal("appointment").default("appointment").optional(),
  appointmentId: z.string(),
  typeId: z.string(),
  staffId: z.string(),
});

/** @internal */
export type AppointmentCheckin$Outbound = {
  id: string;
  customer: string;
  company: string;
  timestamp: number;
  enrollmentId?: string | null | undefined;
  name?: string | undefined;
  kind: "appointment";
  appointmentId: string;
  typeId: string;
  staffId: string;
};

/** @internal */
export const AppointmentCheckin$outboundSchema: z.ZodType<
  AppointmentCheckin$Outbound,
  z.ZodTypeDef,
  AppointmentCheckin
> = z.object({
  id: z.string(),
  customer: z.string(),
  company: z.string(),
  timestamp: z.number(),
  enrollmentId: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  kind: z.literal("appointment"),
  appointmentId: z.string(),
  typeId: z.string(),
  staffId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentCheckin$ {
  /** @deprecated use `AppointmentCheckin$inboundSchema` instead. */
  export const inboundSchema = AppointmentCheckin$inboundSchema;
  /** @deprecated use `AppointmentCheckin$outboundSchema` instead. */
  export const outboundSchema = AppointmentCheckin$outboundSchema;
  /** @deprecated use `AppointmentCheckin$Outbound` instead. */
  export type Outbound = AppointmentCheckin$Outbound;
}

export function appointmentCheckinToJSON(
  appointmentCheckin: AppointmentCheckin,
): string {
  return JSON.stringify(
    AppointmentCheckin$outboundSchema.parse(appointmentCheckin),
  );
}

export function appointmentCheckinFromJSON(
  jsonString: string,
): SafeParseResult<AppointmentCheckin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppointmentCheckin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppointmentCheckin' from JSON`,
  );
}
