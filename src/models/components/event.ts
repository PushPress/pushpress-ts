/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reservation,
  Reservation$inboundSchema,
  Reservation$Outbound,
  Reservation$outboundSchema,
} from "./reservation.js";

/**
 * an invite_only event restricts registration to people who have been invited
 */
export const Access = {
  InviteOnly: "invite_only",
  Open: "open",
} as const;
/**
 * an invite_only event restricts registration to people who have been invited
 */
export type Access = ClosedEnum<typeof Access>;

/**
 * Location information about where the event took place
 */
export type EventLocation = {
  name?: string | undefined;
};

/**
 * Schema for representing a scheduled class
 */
export type Event = {
  /**
   * Unique identifier for the event
   */
  id: string;
  /**
   * Unique identifier for the coach
   */
  coachUuid?: string | null | undefined;
  /**
   * an invite_only event restricts registration to people who have been invited
   */
  access: Access;
  /**
   * Unique identifier for the assistant coach, if any
   */
  assistantCoachUuid: string | null;
  /**
   * Unique identifier for the company
   */
  company?: string | null | undefined;
  /**
   * Title of the calendar event
   */
  title?: string | null | undefined;
  /**
   * Unique identifier for the location, if any
   */
  locationUuid?: string | null | undefined;
  /**
   * Location information about where the event took place
   */
  location?: EventLocation | undefined;
  reservations?: Array<Reservation> | undefined;
  /**
   * Start time of the event as a Unix timestamp in seconds
   */
  start: number;
  /**
   * End time of the event as a Unix timestamp in seconds
   */
  end: number;
  /**
   * Whether the event is an all-day event
   */
  isAllDay: boolean;
};

/** @internal */
export const Access$inboundSchema: z.ZodNativeEnum<typeof Access> = z
  .nativeEnum(Access);

/** @internal */
export const Access$outboundSchema: z.ZodNativeEnum<typeof Access> =
  Access$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Access$ {
  /** @deprecated use `Access$inboundSchema` instead. */
  export const inboundSchema = Access$inboundSchema;
  /** @deprecated use `Access$outboundSchema` instead. */
  export const outboundSchema = Access$outboundSchema;
}

/** @internal */
export const EventLocation$inboundSchema: z.ZodType<
  EventLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().default(""),
});

/** @internal */
export type EventLocation$Outbound = {
  name: string;
};

/** @internal */
export const EventLocation$outboundSchema: z.ZodType<
  EventLocation$Outbound,
  z.ZodTypeDef,
  EventLocation
> = z.object({
  name: z.string().default(""),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventLocation$ {
  /** @deprecated use `EventLocation$inboundSchema` instead. */
  export const inboundSchema = EventLocation$inboundSchema;
  /** @deprecated use `EventLocation$outboundSchema` instead. */
  export const outboundSchema = EventLocation$outboundSchema;
  /** @deprecated use `EventLocation$Outbound` instead. */
  export type Outbound = EventLocation$Outbound;
}

export function eventLocationToJSON(eventLocation: EventLocation): string {
  return JSON.stringify(EventLocation$outboundSchema.parse(eventLocation));
}

export function eventLocationFromJSON(
  jsonString: string,
): SafeParseResult<EventLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventLocation' from JSON`,
  );
}

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    coachUuid: z.nullable(z.string()).optional(),
    access: Access$inboundSchema,
    assistantCoachUuid: z.nullable(z.string()),
    company: z.nullable(z.string()).optional(),
    title: z.nullable(z.string().default("")),
    locationUuid: z.nullable(z.string()).optional(),
    location: z.lazy(() => EventLocation$inboundSchema).optional(),
    reservations: z.array(Reservation$inboundSchema).optional(),
    start: z.number(),
    end: z.number(),
    isAllDay: z.boolean(),
  });

/** @internal */
export type Event$Outbound = {
  id: string;
  coachUuid?: string | null | undefined;
  access: string;
  assistantCoachUuid: string | null;
  company?: string | null | undefined;
  title: string | null;
  locationUuid?: string | null | undefined;
  location?: EventLocation$Outbound | undefined;
  reservations?: Array<Reservation$Outbound> | undefined;
  start: number;
  end: number;
  isAllDay: boolean;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<
  Event$Outbound,
  z.ZodTypeDef,
  Event
> = z.object({
  id: z.string(),
  coachUuid: z.nullable(z.string()).optional(),
  access: Access$outboundSchema,
  assistantCoachUuid: z.nullable(z.string()),
  company: z.nullable(z.string()).optional(),
  title: z.nullable(z.string().default("")),
  locationUuid: z.nullable(z.string()).optional(),
  location: z.lazy(() => EventLocation$outboundSchema).optional(),
  reservations: z.array(Reservation$outboundSchema).optional(),
  start: z.number(),
  end: z.number(),
  isAllDay: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
  /** @deprecated use `Event$Outbound` instead. */
  export type Outbound = Event$Outbound;
}

export function eventToJSON(event: Event): string {
  return JSON.stringify(Event$outboundSchema.parse(event));
}

export function eventFromJSON(
  jsonString: string,
): SafeParseResult<Event, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event' from JSON`,
  );
}
