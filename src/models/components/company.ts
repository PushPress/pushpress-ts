/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents an entity with one or more PushPress accounts, such as a gym, martial arts studio, or mermaid swim school
 */
export type Company = {
  /**
   * A unique identifier for the company
   */
  id: string;
  /**
   * The name of the company
   */
  name: string;
  /**
   * The subdomain associated with the company
   */
  subdomain: string;
  /**
   * The default timezone of the company
   */
  defaultTimezone: string;
  /**
   * The contact phone number of the company
   */
  phone?: string | null | undefined;
  /**
   * The contact email address of the company
   */
  email: string;
  /**
   * The website URL of the company
   */
  url?: string | undefined;
};

/** @internal */
export const Company$inboundSchema: z.ZodType<Company, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
    subdomain: z.string(),
    defaultTimezone: z.string(),
    phone: z.nullable(z.string()).optional(),
    email: z.string(),
    url: z.string().optional(),
  });

/** @internal */
export type Company$Outbound = {
  id: string;
  name: string;
  subdomain: string;
  defaultTimezone: string;
  phone?: string | null | undefined;
  email: string;
  url?: string | undefined;
};

/** @internal */
export const Company$outboundSchema: z.ZodType<
  Company$Outbound,
  z.ZodTypeDef,
  Company
> = z.object({
  id: z.string(),
  name: z.string(),
  subdomain: z.string(),
  defaultTimezone: z.string(),
  phone: z.nullable(z.string()).optional(),
  email: z.string(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Company$ {
  /** @deprecated use `Company$inboundSchema` instead. */
  export const inboundSchema = Company$inboundSchema;
  /** @deprecated use `Company$outboundSchema` instead. */
  export const outboundSchema = Company$outboundSchema;
  /** @deprecated use `Company$Outbound` instead. */
  export type Outbound = Company$Outbound;
}

export function companyToJSON(company: Company): string {
  return JSON.stringify(Company$outboundSchema.parse(company));
}

export function companyFromJSON(
  jsonString: string,
): SafeParseResult<Company, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Company$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Company' from JSON`,
  );
}
