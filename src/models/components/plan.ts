/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Four = {
  type?: "non-recurring" | undefined;
};

export type Three = {
  type?: "limited-recurring" | undefined;
  occurrences: number;
};

export type Two = {
  type?: "recurring" | undefined;
};

export type One = {
  type?: "session-pack" | undefined;
  occurrences: number;
};

export type RecurrenceDetails = Two | Four | One | Three;

export type Policies = {
  allowClassCheckins: boolean;
  allowOpenGymCheckins: boolean;
  allow24HourAccess: boolean;
};

export type Category = {
  name: string;
};

/**
 * Schema representing a plan that a customer can purchase for access to a set of products/services
 */
export type Plan = {
  /**
   * Unique identifier for the plan
   */
  id: string;
  /**
   * Display name for the plan
   */
  name: string;
  /**
   * unique identifier for the company
   */
  companyId: string;
  recurrenceDetails: Two | Four | One | Three;
  policies: Policies;
  category: Category;
};

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal("non-recurring").optional(),
  });

/** @internal */
export type Four$Outbound = {
  type: "non-recurring";
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    type: z.literal("non-recurring").default("non-recurring" as const),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal("limited-recurring").optional(),
    occurrences: z.number(),
  });

/** @internal */
export type Three$Outbound = {
  type: "limited-recurring";
  occurrences: number;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  type: z.literal("limited-recurring").default("limited-recurring" as const),
  occurrences: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal("recurring").optional(),
  });

/** @internal */
export type Two$Outbound = {
  type: "recurring";
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .object({
    type: z.literal("recurring").default("recurring" as const),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal("session-pack").optional(),
    occurrences: z.number(),
  });

/** @internal */
export type One$Outbound = {
  type: "session-pack";
  occurrences: number;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    type: z.literal("session-pack").default("session-pack" as const),
    occurrences: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const RecurrenceDetails$inboundSchema: z.ZodType<
  RecurrenceDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Two$inboundSchema),
  z.lazy(() => Four$inboundSchema),
  z.lazy(() => One$inboundSchema),
  z.lazy(() => Three$inboundSchema),
]);

/** @internal */
export type RecurrenceDetails$Outbound =
  | Two$Outbound
  | Four$Outbound
  | One$Outbound
  | Three$Outbound;

/** @internal */
export const RecurrenceDetails$outboundSchema: z.ZodType<
  RecurrenceDetails$Outbound,
  z.ZodTypeDef,
  RecurrenceDetails
> = z.union([
  z.lazy(() => Two$outboundSchema),
  z.lazy(() => Four$outboundSchema),
  z.lazy(() => One$outboundSchema),
  z.lazy(() => Three$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecurrenceDetails$ {
  /** @deprecated use `RecurrenceDetails$inboundSchema` instead. */
  export const inboundSchema = RecurrenceDetails$inboundSchema;
  /** @deprecated use `RecurrenceDetails$outboundSchema` instead. */
  export const outboundSchema = RecurrenceDetails$outboundSchema;
  /** @deprecated use `RecurrenceDetails$Outbound` instead. */
  export type Outbound = RecurrenceDetails$Outbound;
}

export function recurrenceDetailsToJSON(
  recurrenceDetails: RecurrenceDetails,
): string {
  return JSON.stringify(
    RecurrenceDetails$outboundSchema.parse(recurrenceDetails),
  );
}

export function recurrenceDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RecurrenceDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecurrenceDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecurrenceDetails' from JSON`,
  );
}

/** @internal */
export const Policies$inboundSchema: z.ZodType<
  Policies,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowClassCheckins: z.boolean(),
  allowOpenGymCheckins: z.boolean(),
  allow24HourAccess: z.boolean(),
});

/** @internal */
export type Policies$Outbound = {
  allowClassCheckins: boolean;
  allowOpenGymCheckins: boolean;
  allow24HourAccess: boolean;
};

/** @internal */
export const Policies$outboundSchema: z.ZodType<
  Policies$Outbound,
  z.ZodTypeDef,
  Policies
> = z.object({
  allowClassCheckins: z.boolean(),
  allowOpenGymCheckins: z.boolean(),
  allow24HourAccess: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Policies$ {
  /** @deprecated use `Policies$inboundSchema` instead. */
  export const inboundSchema = Policies$inboundSchema;
  /** @deprecated use `Policies$outboundSchema` instead. */
  export const outboundSchema = Policies$outboundSchema;
  /** @deprecated use `Policies$Outbound` instead. */
  export type Outbound = Policies$Outbound;
}

export function policiesToJSON(policies: Policies): string {
  return JSON.stringify(Policies$outboundSchema.parse(policies));
}

export function policiesFromJSON(
  jsonString: string,
): SafeParseResult<Policies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Policies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Policies' from JSON`,
  );
}

/** @internal */
export const Category$inboundSchema: z.ZodType<
  Category,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type Category$Outbound = {
  name: string;
};

/** @internal */
export const Category$outboundSchema: z.ZodType<
  Category$Outbound,
  z.ZodTypeDef,
  Category
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
  /** @deprecated use `Category$inboundSchema` instead. */
  export const inboundSchema = Category$inboundSchema;
  /** @deprecated use `Category$outboundSchema` instead. */
  export const outboundSchema = Category$outboundSchema;
  /** @deprecated use `Category$Outbound` instead. */
  export type Outbound = Category$Outbound;
}

export function categoryToJSON(category: Category): string {
  return JSON.stringify(Category$outboundSchema.parse(category));
}

export function categoryFromJSON(
  jsonString: string,
): SafeParseResult<Category, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Category$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Category' from JSON`,
  );
}

/** @internal */
export const Plan$inboundSchema: z.ZodType<Plan, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    name: z.string(),
    companyId: z.string(),
    recurrenceDetails: z.union([
      z.lazy(() => Two$inboundSchema),
      z.lazy(() => Four$inboundSchema),
      z.lazy(() => One$inboundSchema),
      z.lazy(() => Three$inboundSchema),
    ]),
    policies: z.lazy(() => Policies$inboundSchema),
    category: z.lazy(() => Category$inboundSchema),
  });

/** @internal */
export type Plan$Outbound = {
  id: string;
  name: string;
  companyId: string;
  recurrenceDetails:
    | Two$Outbound
    | Four$Outbound
    | One$Outbound
    | Three$Outbound;
  policies: Policies$Outbound;
  category: Category$Outbound;
};

/** @internal */
export const Plan$outboundSchema: z.ZodType<Plan$Outbound, z.ZodTypeDef, Plan> =
  z.object({
    id: z.string(),
    name: z.string(),
    companyId: z.string(),
    recurrenceDetails: z.union([
      z.lazy(() => Two$outboundSchema),
      z.lazy(() => Four$outboundSchema),
      z.lazy(() => One$outboundSchema),
      z.lazy(() => Three$outboundSchema),
    ]),
    policies: z.lazy(() => Policies$outboundSchema),
    category: z.lazy(() => Category$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Plan$ {
  /** @deprecated use `Plan$inboundSchema` instead. */
  export const inboundSchema = Plan$inboundSchema;
  /** @deprecated use `Plan$outboundSchema` instead. */
  export const outboundSchema = Plan$outboundSchema;
  /** @deprecated use `Plan$Outbound` instead. */
  export type Outbound = Plan$Outbound;
}

export function planToJSON(plan: Plan): string {
  return JSON.stringify(Plan$outboundSchema.parse(plan));
}

export function planFromJSON(
  jsonString: string,
): SafeParseResult<Plan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Plan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Plan' from JSON`,
  );
}
