/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Status = {
  Active: "active",
  Alert: "alert",
  Canceled: "canceled",
  Completed: "completed",
  Paused: "paused",
  Pendactivation: "pendactivation",
  Pendcancel: "pendcancel",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type CheckinDetails = {
  /**
   * Number of times the customer has checked in in the current checkin period
   */
  checkins: number;
  /**
   * number of checkins allowable for the checkin period, -1 for unlimited
   */
  limit: number;
};

/**
 * misc metadata about the entitlement
 */
export type Metadata = {};

export type Entitlements = {
  type: string;
  id: string;
  interval: string;
  quantity: number;
  /**
   * misc metadata about the entitlement
   */
  metadata: Metadata | null;
};

/**
 * Schema representing a subscription that a customer has to a plan
 */
export type Enrollment = {
  /**
   * Unique identifier for the subscription
   */
  id: string;
  /**
   * Unique identifier for the customer
   */
  customerId: string;
  /**
   * Unique identifier for the company
   */
  companyId: string;
  /**
   * Unique identifier for the plan
   */
  planId?: string | null | undefined;
  status: Status;
  checkinDetails: CheckinDetails;
  entitlements: Array<Entitlements>;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const CheckinDetails$inboundSchema: z.ZodType<
  CheckinDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  checkins: z.number(),
  limit: z.number(),
});

/** @internal */
export type CheckinDetails$Outbound = {
  checkins: number;
  limit: number;
};

/** @internal */
export const CheckinDetails$outboundSchema: z.ZodType<
  CheckinDetails$Outbound,
  z.ZodTypeDef,
  CheckinDetails
> = z.object({
  checkins: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckinDetails$ {
  /** @deprecated use `CheckinDetails$inboundSchema` instead. */
  export const inboundSchema = CheckinDetails$inboundSchema;
  /** @deprecated use `CheckinDetails$outboundSchema` instead. */
  export const outboundSchema = CheckinDetails$outboundSchema;
  /** @deprecated use `CheckinDetails$Outbound` instead. */
  export type Outbound = CheckinDetails$Outbound;
}

export function checkinDetailsToJSON(checkinDetails: CheckinDetails): string {
  return JSON.stringify(CheckinDetails$outboundSchema.parse(checkinDetails));
}

export function checkinDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CheckinDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckinDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckinDetails' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Metadata$Outbound = {};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const Entitlements$inboundSchema: z.ZodType<
  Entitlements,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  id: z.string(),
  interval: z.string(),
  quantity: z.number(),
  metadata: z.nullable(z.lazy(() => Metadata$inboundSchema)),
});

/** @internal */
export type Entitlements$Outbound = {
  type: string;
  id: string;
  interval: string;
  quantity: number;
  metadata: Metadata$Outbound | null;
};

/** @internal */
export const Entitlements$outboundSchema: z.ZodType<
  Entitlements$Outbound,
  z.ZodTypeDef,
  Entitlements
> = z.object({
  type: z.string(),
  id: z.string(),
  interval: z.string(),
  quantity: z.number(),
  metadata: z.nullable(z.lazy(() => Metadata$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Entitlements$ {
  /** @deprecated use `Entitlements$inboundSchema` instead. */
  export const inboundSchema = Entitlements$inboundSchema;
  /** @deprecated use `Entitlements$outboundSchema` instead. */
  export const outboundSchema = Entitlements$outboundSchema;
  /** @deprecated use `Entitlements$Outbound` instead. */
  export type Outbound = Entitlements$Outbound;
}

export function entitlementsToJSON(entitlements: Entitlements): string {
  return JSON.stringify(Entitlements$outboundSchema.parse(entitlements));
}

export function entitlementsFromJSON(
  jsonString: string,
): SafeParseResult<Entitlements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Entitlements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Entitlements' from JSON`,
  );
}

/** @internal */
export const Enrollment$inboundSchema: z.ZodType<
  Enrollment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  customerId: z.string(),
  companyId: z.string(),
  planId: z.nullable(z.string()).optional(),
  status: Status$inboundSchema,
  checkinDetails: z.lazy(() => CheckinDetails$inboundSchema),
  entitlements: z.array(z.lazy(() => Entitlements$inboundSchema)),
});

/** @internal */
export type Enrollment$Outbound = {
  id: string;
  customerId: string;
  companyId: string;
  planId?: string | null | undefined;
  status: string;
  checkinDetails: CheckinDetails$Outbound;
  entitlements: Array<Entitlements$Outbound>;
};

/** @internal */
export const Enrollment$outboundSchema: z.ZodType<
  Enrollment$Outbound,
  z.ZodTypeDef,
  Enrollment
> = z.object({
  id: z.string(),
  customerId: z.string(),
  companyId: z.string(),
  planId: z.nullable(z.string()).optional(),
  status: Status$outboundSchema,
  checkinDetails: z.lazy(() => CheckinDetails$outboundSchema),
  entitlements: z.array(z.lazy(() => Entitlements$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Enrollment$ {
  /** @deprecated use `Enrollment$inboundSchema` instead. */
  export const inboundSchema = Enrollment$inboundSchema;
  /** @deprecated use `Enrollment$outboundSchema` instead. */
  export const outboundSchema = Enrollment$outboundSchema;
  /** @deprecated use `Enrollment$Outbound` instead. */
  export type Outbound = Enrollment$Outbound;
}

export function enrollmentToJSON(enrollment: Enrollment): string {
  return JSON.stringify(Enrollment$outboundSchema.parse(enrollment));
}

export function enrollmentFromJSON(
  jsonString: string,
): SafeParseResult<Enrollment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Enrollment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Enrollment' from JSON`,
  );
}
