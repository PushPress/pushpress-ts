/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Role of the customer at the event
 */
export const Role = {
  Staff: "staff",
  Coach: "coach",
  Assistant: "assistant",
  Attendee: "attendee",
} as const;
/**
 * Role of the customer at the event
 */
export type Role = ClosedEnum<typeof Role>;

/**
 * Information about the type of the event
 */
export type EventCheckinType = {
  /**
   * UUID of the event type
   */
  id: string;
  /**
   * Name of the event type
   */
  name: string;
};

/**
 * Details of a customer's check-in for an event
 */
export type EventCheckin = {
  /**
   * Unique identifier for the checkin record
   */
  id: string;
  /**
   * UUID of the customer who checked in
   */
  customer: string;
  /**
   * UUID of the company
   */
  company: string;
  /**
   * Unix timestamp representing the time of checkin
   */
  timestamp: number;
  /**
   * UUID of the enrollment record, null if the checkin is not associated with a plan enrollment
   */
  enrollmentId?: string | null | undefined;
  /**
   * Name of the event being checked into
   */
  name: string;
  /**
   * Type of check-in, which is always 'event'
   */
  kind?: "event" | undefined;
  /**
   * Role of the customer at the event
   */
  role: Role;
  /**
   * UUID of the event type
   */
  typeId: string;
  /**
   * UUID of the event
   */
  eventId: string;
  /**
   * Information about the type of the event
   */
  type: EventCheckinType;
};

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const EventCheckinType$inboundSchema: z.ZodType<
  EventCheckinType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type EventCheckinType$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const EventCheckinType$outboundSchema: z.ZodType<
  EventCheckinType$Outbound,
  z.ZodTypeDef,
  EventCheckinType
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventCheckinType$ {
  /** @deprecated use `EventCheckinType$inboundSchema` instead. */
  export const inboundSchema = EventCheckinType$inboundSchema;
  /** @deprecated use `EventCheckinType$outboundSchema` instead. */
  export const outboundSchema = EventCheckinType$outboundSchema;
  /** @deprecated use `EventCheckinType$Outbound` instead. */
  export type Outbound = EventCheckinType$Outbound;
}

export function eventCheckinTypeToJSON(
  eventCheckinType: EventCheckinType,
): string {
  return JSON.stringify(
    EventCheckinType$outboundSchema.parse(eventCheckinType),
  );
}

export function eventCheckinTypeFromJSON(
  jsonString: string,
): SafeParseResult<EventCheckinType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventCheckinType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventCheckinType' from JSON`,
  );
}

/** @internal */
export const EventCheckin$inboundSchema: z.ZodType<
  EventCheckin,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  customer: z.string(),
  company: z.string(),
  timestamp: z.number(),
  enrollmentId: z.nullable(z.string()).optional(),
  name: z.string(),
  kind: z.literal("event").optional(),
  role: Role$inboundSchema,
  typeId: z.string(),
  eventId: z.string(),
  type: z.lazy(() => EventCheckinType$inboundSchema),
});

/** @internal */
export type EventCheckin$Outbound = {
  id: string;
  customer: string;
  company: string;
  timestamp: number;
  enrollmentId?: string | null | undefined;
  name: string;
  kind: "event";
  role: string;
  typeId: string;
  eventId: string;
  type: EventCheckinType$Outbound;
};

/** @internal */
export const EventCheckin$outboundSchema: z.ZodType<
  EventCheckin$Outbound,
  z.ZodTypeDef,
  EventCheckin
> = z.object({
  id: z.string(),
  customer: z.string(),
  company: z.string(),
  timestamp: z.number(),
  enrollmentId: z.nullable(z.string()).optional(),
  name: z.string(),
  kind: z.literal("event").default("event" as const),
  role: Role$outboundSchema,
  typeId: z.string(),
  eventId: z.string(),
  type: z.lazy(() => EventCheckinType$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventCheckin$ {
  /** @deprecated use `EventCheckin$inboundSchema` instead. */
  export const inboundSchema = EventCheckin$inboundSchema;
  /** @deprecated use `EventCheckin$outboundSchema` instead. */
  export const outboundSchema = EventCheckin$outboundSchema;
  /** @deprecated use `EventCheckin$Outbound` instead. */
  export type Outbound = EventCheckin$Outbound;
}

export function eventCheckinToJSON(eventCheckin: EventCheckin): string {
  return JSON.stringify(EventCheckin$outboundSchema.parse(eventCheckin));
}

export function eventCheckinFromJSON(
  jsonString: string,
): SafeParseResult<EventCheckin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventCheckin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventCheckin' from JSON`,
  );
}
