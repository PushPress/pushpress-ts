/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AppointmentType = {
  /**
   * name of the appointment type
   */
  name: string;
};

/**
 * Schema for representing a Regsitration for some scheduled event
 */
export type Appointment = {
  /**
   * unique identifier for the appointment
   */
  id: string;
  type: AppointmentType;
  /**
   * unique identifier for the company
   */
  companyId: string;
  /**
   * unique identifier for the customer
   */
  customerId: string;
  /**
   * Unix timestamp for the start time of the appointment
   */
  startTimestamp: number;
  /**
   * unique identifier for the staff member, corresponding to a customer with a staff role
   */
  staffId: string;
};

/** @internal */
export const AppointmentType$inboundSchema: z.ZodType<
  AppointmentType,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type AppointmentType$Outbound = {
  name: string;
};

/** @internal */
export const AppointmentType$outboundSchema: z.ZodType<
  AppointmentType$Outbound,
  z.ZodTypeDef,
  AppointmentType
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentType$ {
  /** @deprecated use `AppointmentType$inboundSchema` instead. */
  export const inboundSchema = AppointmentType$inboundSchema;
  /** @deprecated use `AppointmentType$outboundSchema` instead. */
  export const outboundSchema = AppointmentType$outboundSchema;
  /** @deprecated use `AppointmentType$Outbound` instead. */
  export type Outbound = AppointmentType$Outbound;
}

export function appointmentTypeToJSON(
  appointmentType: AppointmentType,
): string {
  return JSON.stringify(AppointmentType$outboundSchema.parse(appointmentType));
}

export function appointmentTypeFromJSON(
  jsonString: string,
): SafeParseResult<AppointmentType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppointmentType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppointmentType' from JSON`,
  );
}

/** @internal */
export const Appointment$inboundSchema: z.ZodType<
  Appointment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.lazy(() => AppointmentType$inboundSchema),
  companyId: z.string(),
  customerId: z.string(),
  startTimestamp: z.number(),
  staffId: z.string(),
});

/** @internal */
export type Appointment$Outbound = {
  id: string;
  type: AppointmentType$Outbound;
  companyId: string;
  customerId: string;
  startTimestamp: number;
  staffId: string;
};

/** @internal */
export const Appointment$outboundSchema: z.ZodType<
  Appointment$Outbound,
  z.ZodTypeDef,
  Appointment
> = z.object({
  id: z.string(),
  type: z.lazy(() => AppointmentType$outboundSchema),
  companyId: z.string(),
  customerId: z.string(),
  startTimestamp: z.number(),
  staffId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Appointment$ {
  /** @deprecated use `Appointment$inboundSchema` instead. */
  export const inboundSchema = Appointment$inboundSchema;
  /** @deprecated use `Appointment$outboundSchema` instead. */
  export const outboundSchema = Appointment$outboundSchema;
  /** @deprecated use `Appointment$Outbound` instead. */
  export type Outbound = Appointment$Outbound;
}

export function appointmentToJSON(appointment: Appointment): string {
  return JSON.stringify(Appointment$outboundSchema.parse(appointment));
}

export function appointmentFromJSON(
  jsonString: string,
): SafeParseResult<Appointment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Appointment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Appointment' from JSON`,
  );
}
