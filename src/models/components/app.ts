/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type App = {
  /**
   * Unique identifier for the app
   */
  id: string;
  /**
   * Name of the app
   */
  name: string;
  /**
   * Description of the app
   */
  description?: string | undefined;
  /**
   * Timestamp when the app was created
   */
  created: Date;
  /**
   * Timestamp when the app was last updated
   */
  updated: Date;
};

/** @internal */
export const App$inboundSchema: z.ZodType<App, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    name: z.string(),
    description: z.string().optional(),
    created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    updated: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  });

/** @internal */
export type App$Outbound = {
  id: string;
  name: string;
  description?: string | undefined;
  created: string;
  updated: string;
};

/** @internal */
export const App$outboundSchema: z.ZodType<App$Outbound, z.ZodTypeDef, App> = z
  .object({
    id: z.string(),
    name: z.string(),
    description: z.string().optional(),
    created: z.date().transform(v => v.toISOString()),
    updated: z.date().transform(v => v.toISOString()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace App$ {
  /** @deprecated use `App$inboundSchema` instead. */
  export const inboundSchema = App$inboundSchema;
  /** @deprecated use `App$outboundSchema` instead. */
  export const outboundSchema = App$outboundSchema;
  /** @deprecated use `App$Outbound` instead. */
  export type Outbound = App$Outbound;
}
