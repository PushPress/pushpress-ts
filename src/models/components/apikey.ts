/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Platform API key
 */
export type ApiKey = {
  keyUuid: string;
  companyId: string;
  name: string;
  description: string;
  createdAt: number;
  /**
   * Unix timestamp in milliseconds
   */
  lastUsedAt?: number | null | undefined;
  /**
   * Unix timestamp in milliseconds
   */
  expiresAt?: number | null | undefined;
};

/** @internal */
export const ApiKey$inboundSchema: z.ZodType<ApiKey, z.ZodTypeDef, unknown> = z
  .object({
    keyUuid: z.string(),
    companyId: z.string(),
    name: z.string(),
    description: z.string(),
    createdAt: z.number(),
    lastUsedAt: z.nullable(z.number()).optional(),
    expiresAt: z.nullable(z.number()).optional(),
  });

/** @internal */
export type ApiKey$Outbound = {
  keyUuid: string;
  companyId: string;
  name: string;
  description: string;
  createdAt: number;
  lastUsedAt?: number | null | undefined;
  expiresAt?: number | null | undefined;
};

/** @internal */
export const ApiKey$outboundSchema: z.ZodType<
  ApiKey$Outbound,
  z.ZodTypeDef,
  ApiKey
> = z.object({
  keyUuid: z.string(),
  companyId: z.string(),
  name: z.string(),
  description: z.string(),
  createdAt: z.number(),
  lastUsedAt: z.nullable(z.number()).optional(),
  expiresAt: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKey$ {
  /** @deprecated use `ApiKey$inboundSchema` instead. */
  export const inboundSchema = ApiKey$inboundSchema;
  /** @deprecated use `ApiKey$outboundSchema` instead. */
  export const outboundSchema = ApiKey$outboundSchema;
  /** @deprecated use `ApiKey$Outbound` instead. */
  export type Outbound = ApiKey$Outbound;
}

export function apiKeyToJSON(apiKey: ApiKey): string {
  return JSON.stringify(ApiKey$outboundSchema.parse(apiKey));
}

export function apiKeyFromJSON(
  jsonString: string,
): SafeParseResult<ApiKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiKey' from JSON`,
  );
}
