/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PreviousValues =
  | components.OpenCheckin
  | components.AppointmentCheckin
  | components.EventCheckin
  | components.ClassCheckin;

export const CheckinUpdatedEventEvent = {
  CheckinUpdated: "checkin.updated",
} as const;
export type CheckinUpdatedEventEvent = ClosedEnum<
  typeof CheckinUpdatedEventEvent
>;

/**
 * not implemented
 */
export type CheckinUpdatedEventRequestBody = {
  /**
   * Checkin for a class, event, appointment or an open facility
   */
  data: components.Checkin;
  previousValues?:
    | components.OpenCheckin
    | components.AppointmentCheckin
    | components.EventCheckin
    | components.ClassCheckin
    | undefined;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: CheckinUpdatedEventEvent;
};

/** @internal */
export const PreviousValues$inboundSchema: z.ZodType<
  PreviousValues,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.OpenCheckin$inboundSchema,
  components.AppointmentCheckin$inboundSchema,
  components.EventCheckin$inboundSchema,
  components.ClassCheckin$inboundSchema,
]);

/** @internal */
export type PreviousValues$Outbound =
  | components.OpenCheckin$Outbound
  | components.AppointmentCheckin$Outbound
  | components.EventCheckin$Outbound
  | components.ClassCheckin$Outbound;

/** @internal */
export const PreviousValues$outboundSchema: z.ZodType<
  PreviousValues$Outbound,
  z.ZodTypeDef,
  PreviousValues
> = z.union([
  components.OpenCheckin$outboundSchema,
  components.AppointmentCheckin$outboundSchema,
  components.EventCheckin$outboundSchema,
  components.ClassCheckin$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviousValues$ {
  /** @deprecated use `PreviousValues$inboundSchema` instead. */
  export const inboundSchema = PreviousValues$inboundSchema;
  /** @deprecated use `PreviousValues$outboundSchema` instead. */
  export const outboundSchema = PreviousValues$outboundSchema;
  /** @deprecated use `PreviousValues$Outbound` instead. */
  export type Outbound = PreviousValues$Outbound;
}

export function previousValuesToJSON(previousValues: PreviousValues): string {
  return JSON.stringify(PreviousValues$outboundSchema.parse(previousValues));
}

export function previousValuesFromJSON(
  jsonString: string,
): SafeParseResult<PreviousValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviousValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviousValues' from JSON`,
  );
}

/** @internal */
export const CheckinUpdatedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof CheckinUpdatedEventEvent
> = z.nativeEnum(CheckinUpdatedEventEvent);

/** @internal */
export const CheckinUpdatedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof CheckinUpdatedEventEvent
> = CheckinUpdatedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckinUpdatedEventEvent$ {
  /** @deprecated use `CheckinUpdatedEventEvent$inboundSchema` instead. */
  export const inboundSchema = CheckinUpdatedEventEvent$inboundSchema;
  /** @deprecated use `CheckinUpdatedEventEvent$outboundSchema` instead. */
  export const outboundSchema = CheckinUpdatedEventEvent$outboundSchema;
}

/** @internal */
export const CheckinUpdatedEventRequestBody$inboundSchema: z.ZodType<
  CheckinUpdatedEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Checkin$inboundSchema,
  previousValues: z.union([
    components.OpenCheckin$inboundSchema,
    components.AppointmentCheckin$inboundSchema,
    components.EventCheckin$inboundSchema,
    components.ClassCheckin$inboundSchema,
  ]).optional(),
  created: z.number().int(),
  event: CheckinUpdatedEventEvent$inboundSchema,
});

/** @internal */
export type CheckinUpdatedEventRequestBody$Outbound = {
  data: components.Checkin$Outbound;
  previousValues?:
    | components.OpenCheckin$Outbound
    | components.AppointmentCheckin$Outbound
    | components.EventCheckin$Outbound
    | components.ClassCheckin$Outbound
    | undefined;
  created: number;
  event: string;
};

/** @internal */
export const CheckinUpdatedEventRequestBody$outboundSchema: z.ZodType<
  CheckinUpdatedEventRequestBody$Outbound,
  z.ZodTypeDef,
  CheckinUpdatedEventRequestBody
> = z.object({
  data: components.Checkin$outboundSchema,
  previousValues: z.union([
    components.OpenCheckin$outboundSchema,
    components.AppointmentCheckin$outboundSchema,
    components.EventCheckin$outboundSchema,
    components.ClassCheckin$outboundSchema,
  ]).optional(),
  created: z.number().int(),
  event: CheckinUpdatedEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckinUpdatedEventRequestBody$ {
  /** @deprecated use `CheckinUpdatedEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = CheckinUpdatedEventRequestBody$inboundSchema;
  /** @deprecated use `CheckinUpdatedEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = CheckinUpdatedEventRequestBody$outboundSchema;
  /** @deprecated use `CheckinUpdatedEventRequestBody$Outbound` instead. */
  export type Outbound = CheckinUpdatedEventRequestBody$Outbound;
}

export function checkinUpdatedEventRequestBodyToJSON(
  checkinUpdatedEventRequestBody: CheckinUpdatedEventRequestBody,
): string {
  return JSON.stringify(
    CheckinUpdatedEventRequestBody$outboundSchema.parse(
      checkinUpdatedEventRequestBody,
    ),
  );
}

export function checkinUpdatedEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CheckinUpdatedEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckinUpdatedEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckinUpdatedEventRequestBody' from JSON`,
  );
}
