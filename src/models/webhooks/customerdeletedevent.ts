/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CustomerDeletedEventEvent = {
  CustomerDeleted: "customer.deleted",
} as const;
export type CustomerDeletedEventEvent = ClosedEnum<
  typeof CustomerDeletedEventEvent
>;

/**
 * Customer Deleted Event (Not implemented)
 */
export type CustomerDeletedEventRequestBody = {
  /**
   * Schema representing a customer, former customer, or lead served by the company
   */
  data: components.Customer;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: CustomerDeletedEventEvent;
};

/** @internal */
export const CustomerDeletedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof CustomerDeletedEventEvent
> = z.nativeEnum(CustomerDeletedEventEvent);

/** @internal */
export const CustomerDeletedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof CustomerDeletedEventEvent
> = CustomerDeletedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerDeletedEventEvent$ {
  /** @deprecated use `CustomerDeletedEventEvent$inboundSchema` instead. */
  export const inboundSchema = CustomerDeletedEventEvent$inboundSchema;
  /** @deprecated use `CustomerDeletedEventEvent$outboundSchema` instead. */
  export const outboundSchema = CustomerDeletedEventEvent$outboundSchema;
}

/** @internal */
export const CustomerDeletedEventRequestBody$inboundSchema: z.ZodType<
  CustomerDeletedEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Customer$inboundSchema,
  created: z.number().int(),
  event: CustomerDeletedEventEvent$inboundSchema,
});

/** @internal */
export type CustomerDeletedEventRequestBody$Outbound = {
  data: components.Customer$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const CustomerDeletedEventRequestBody$outboundSchema: z.ZodType<
  CustomerDeletedEventRequestBody$Outbound,
  z.ZodTypeDef,
  CustomerDeletedEventRequestBody
> = z.object({
  data: components.Customer$outboundSchema,
  created: z.number().int(),
  event: CustomerDeletedEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerDeletedEventRequestBody$ {
  /** @deprecated use `CustomerDeletedEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = CustomerDeletedEventRequestBody$inboundSchema;
  /** @deprecated use `CustomerDeletedEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = CustomerDeletedEventRequestBody$outboundSchema;
  /** @deprecated use `CustomerDeletedEventRequestBody$Outbound` instead. */
  export type Outbound = CustomerDeletedEventRequestBody$Outbound;
}

export function customerDeletedEventRequestBodyToJSON(
  customerDeletedEventRequestBody: CustomerDeletedEventRequestBody,
): string {
  return JSON.stringify(
    CustomerDeletedEventRequestBody$outboundSchema.parse(
      customerDeletedEventRequestBody,
    ),
  );
}

export function customerDeletedEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomerDeletedEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerDeletedEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerDeletedEventRequestBody' from JSON`,
  );
}
