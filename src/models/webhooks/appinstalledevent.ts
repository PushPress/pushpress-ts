/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export type Data = {
  company?: string | undefined;
  app?: string | undefined;
};

export const EventType = {
  Created: "created",
} as const;
export type EventType = ClosedEnum<typeof EventType>;

export type AppInstalledEventRequestBody = {
  data: Data;
  /**
   * Unix timestamp of the creation event
   */
  created: number;
  eventType: EventType;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    company: z.string().optional(),
    app: z.string().optional(),
  });

/** @internal */
export type Data$Outbound = {
  company?: string | undefined;
  app?: string | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    company: z.string().optional(),
    app: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

/** @internal */
export const EventType$inboundSchema: z.ZodNativeEnum<typeof EventType> = z
  .nativeEnum(EventType);

/** @internal */
export const EventType$outboundSchema: z.ZodNativeEnum<typeof EventType> =
  EventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventType$ {
  /** @deprecated use `EventType$inboundSchema` instead. */
  export const inboundSchema = EventType$inboundSchema;
  /** @deprecated use `EventType$outboundSchema` instead. */
  export const outboundSchema = EventType$outboundSchema;
}

/** @internal */
export const AppInstalledEventRequestBody$inboundSchema: z.ZodType<
  AppInstalledEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
  created: z.number().int(),
  eventType: EventType$inboundSchema,
});

/** @internal */
export type AppInstalledEventRequestBody$Outbound = {
  data: Data$Outbound;
  created: number;
  eventType: string;
};

/** @internal */
export const AppInstalledEventRequestBody$outboundSchema: z.ZodType<
  AppInstalledEventRequestBody$Outbound,
  z.ZodTypeDef,
  AppInstalledEventRequestBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
  created: z.number().int(),
  eventType: EventType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppInstalledEventRequestBody$ {
  /** @deprecated use `AppInstalledEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = AppInstalledEventRequestBody$inboundSchema;
  /** @deprecated use `AppInstalledEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = AppInstalledEventRequestBody$outboundSchema;
  /** @deprecated use `AppInstalledEventRequestBody$Outbound` instead. */
  export type Outbound = AppInstalledEventRequestBody$Outbound;
}
