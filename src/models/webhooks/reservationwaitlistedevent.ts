/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ReservationWaitlistedEventEvent = {
  ReservationWaitlisted: "reservation.waitlisted",
} as const;
export type ReservationWaitlistedEventEvent = ClosedEnum<
  typeof ReservationWaitlistedEventEvent
>;

/**
 * Reservation Waitlisted Event
 */
export type ReservationWaitlistedEventRequestBody = {
  /**
   * Schema for representing a reservation for a class or event
   */
  data: components.Reservation;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: ReservationWaitlistedEventEvent;
};

/** @internal */
export const ReservationWaitlistedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof ReservationWaitlistedEventEvent
> = z.nativeEnum(ReservationWaitlistedEventEvent);

/** @internal */
export const ReservationWaitlistedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof ReservationWaitlistedEventEvent
> = ReservationWaitlistedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReservationWaitlistedEventEvent$ {
  /** @deprecated use `ReservationWaitlistedEventEvent$inboundSchema` instead. */
  export const inboundSchema = ReservationWaitlistedEventEvent$inboundSchema;
  /** @deprecated use `ReservationWaitlistedEventEvent$outboundSchema` instead. */
  export const outboundSchema = ReservationWaitlistedEventEvent$outboundSchema;
}

/** @internal */
export const ReservationWaitlistedEventRequestBody$inboundSchema: z.ZodType<
  ReservationWaitlistedEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Reservation$inboundSchema,
  created: z.number().int(),
  event: ReservationWaitlistedEventEvent$inboundSchema,
});

/** @internal */
export type ReservationWaitlistedEventRequestBody$Outbound = {
  data: components.Reservation$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const ReservationWaitlistedEventRequestBody$outboundSchema: z.ZodType<
  ReservationWaitlistedEventRequestBody$Outbound,
  z.ZodTypeDef,
  ReservationWaitlistedEventRequestBody
> = z.object({
  data: components.Reservation$outboundSchema,
  created: z.number().int(),
  event: ReservationWaitlistedEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReservationWaitlistedEventRequestBody$ {
  /** @deprecated use `ReservationWaitlistedEventRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ReservationWaitlistedEventRequestBody$inboundSchema;
  /** @deprecated use `ReservationWaitlistedEventRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ReservationWaitlistedEventRequestBody$outboundSchema;
  /** @deprecated use `ReservationWaitlistedEventRequestBody$Outbound` instead. */
  export type Outbound = ReservationWaitlistedEventRequestBody$Outbound;
}

export function reservationWaitlistedEventRequestBodyToJSON(
  reservationWaitlistedEventRequestBody: ReservationWaitlistedEventRequestBody,
): string {
  return JSON.stringify(
    ReservationWaitlistedEventRequestBody$outboundSchema.parse(
      reservationWaitlistedEventRequestBody,
    ),
  );
}

export function reservationWaitlistedEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ReservationWaitlistedEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ReservationWaitlistedEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReservationWaitlistedEventRequestBody' from JSON`,
  );
}
