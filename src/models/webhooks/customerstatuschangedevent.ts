/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CustomerStatusChangedEventEvent = {
  CustomerStatusChanged: "customer.status.changed",
} as const;
export type CustomerStatusChangedEventEvent = ClosedEnum<
  typeof CustomerStatusChangedEventEvent
>;

/**
 * Customer Status Changed Event
 */
export type CustomerStatusChangedEventRequestBody = {
  /**
   * Schema representing a customer, former customer, or lead served by the company
   */
  data: components.Customer;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: CustomerStatusChangedEventEvent;
};

/** @internal */
export const CustomerStatusChangedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof CustomerStatusChangedEventEvent
> = z.nativeEnum(CustomerStatusChangedEventEvent);

/** @internal */
export const CustomerStatusChangedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof CustomerStatusChangedEventEvent
> = CustomerStatusChangedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerStatusChangedEventEvent$ {
  /** @deprecated use `CustomerStatusChangedEventEvent$inboundSchema` instead. */
  export const inboundSchema = CustomerStatusChangedEventEvent$inboundSchema;
  /** @deprecated use `CustomerStatusChangedEventEvent$outboundSchema` instead. */
  export const outboundSchema = CustomerStatusChangedEventEvent$outboundSchema;
}

/** @internal */
export const CustomerStatusChangedEventRequestBody$inboundSchema: z.ZodType<
  CustomerStatusChangedEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Customer$inboundSchema,
  created: z.number().int(),
  event: CustomerStatusChangedEventEvent$inboundSchema,
});

/** @internal */
export type CustomerStatusChangedEventRequestBody$Outbound = {
  data: components.Customer$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const CustomerStatusChangedEventRequestBody$outboundSchema: z.ZodType<
  CustomerStatusChangedEventRequestBody$Outbound,
  z.ZodTypeDef,
  CustomerStatusChangedEventRequestBody
> = z.object({
  data: components.Customer$outboundSchema,
  created: z.number().int(),
  event: CustomerStatusChangedEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerStatusChangedEventRequestBody$ {
  /** @deprecated use `CustomerStatusChangedEventRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CustomerStatusChangedEventRequestBody$inboundSchema;
  /** @deprecated use `CustomerStatusChangedEventRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CustomerStatusChangedEventRequestBody$outboundSchema;
  /** @deprecated use `CustomerStatusChangedEventRequestBody$Outbound` instead. */
  export type Outbound = CustomerStatusChangedEventRequestBody$Outbound;
}

export function customerStatusChangedEventRequestBodyToJSON(
  customerStatusChangedEventRequestBody: CustomerStatusChangedEventRequestBody,
): string {
  return JSON.stringify(
    CustomerStatusChangedEventRequestBody$outboundSchema.parse(
      customerStatusChangedEventRequestBody,
    ),
  );
}

export function customerStatusChangedEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomerStatusChangedEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerStatusChangedEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerStatusChangedEventRequestBody' from JSON`,
  );
}
