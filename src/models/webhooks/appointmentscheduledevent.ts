/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AppointmentScheduledEventEvent = {
  AppointmentScheduled: "appointment.scheduled",
} as const;
export type AppointmentScheduledEventEvent = ClosedEnum<
  typeof AppointmentScheduledEventEvent
>;

/**
 * Appointment Scheduled Event
 */
export type AppointmentScheduledEventRequestBody = {
  /**
   * Schema for representing a Regsitration for some scheduled event
   */
  data: components.Appointment;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: AppointmentScheduledEventEvent;
};

/** @internal */
export const AppointmentScheduledEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof AppointmentScheduledEventEvent
> = z.nativeEnum(AppointmentScheduledEventEvent);

/** @internal */
export const AppointmentScheduledEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof AppointmentScheduledEventEvent
> = AppointmentScheduledEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentScheduledEventEvent$ {
  /** @deprecated use `AppointmentScheduledEventEvent$inboundSchema` instead. */
  export const inboundSchema = AppointmentScheduledEventEvent$inboundSchema;
  /** @deprecated use `AppointmentScheduledEventEvent$outboundSchema` instead. */
  export const outboundSchema = AppointmentScheduledEventEvent$outboundSchema;
}

/** @internal */
export const AppointmentScheduledEventRequestBody$inboundSchema: z.ZodType<
  AppointmentScheduledEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Appointment$inboundSchema,
  created: z.number().int(),
  event: AppointmentScheduledEventEvent$inboundSchema,
});

/** @internal */
export type AppointmentScheduledEventRequestBody$Outbound = {
  data: components.Appointment$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const AppointmentScheduledEventRequestBody$outboundSchema: z.ZodType<
  AppointmentScheduledEventRequestBody$Outbound,
  z.ZodTypeDef,
  AppointmentScheduledEventRequestBody
> = z.object({
  data: components.Appointment$outboundSchema,
  created: z.number().int(),
  event: AppointmentScheduledEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentScheduledEventRequestBody$ {
  /** @deprecated use `AppointmentScheduledEventRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AppointmentScheduledEventRequestBody$inboundSchema;
  /** @deprecated use `AppointmentScheduledEventRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AppointmentScheduledEventRequestBody$outboundSchema;
  /** @deprecated use `AppointmentScheduledEventRequestBody$Outbound` instead. */
  export type Outbound = AppointmentScheduledEventRequestBody$Outbound;
}

export function appointmentScheduledEventRequestBodyToJSON(
  appointmentScheduledEventRequestBody: AppointmentScheduledEventRequestBody,
): string {
  return JSON.stringify(
    AppointmentScheduledEventRequestBody$outboundSchema.parse(
      appointmentScheduledEventRequestBody,
    ),
  );
}

export function appointmentScheduledEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AppointmentScheduledEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AppointmentScheduledEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppointmentScheduledEventRequestBody' from JSON`,
  );
}
