/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Data = {
  id: string;
  /**
   * Unique identifier for the customer
   */
  customerId: string;
  /**
   * Unique identifier for the company the checkin was deleted from
   */
  companyId: string;
};

export const CheckinDeletedEventEvent = {
  CheckinDeleted: "checkin.deleted",
} as const;
export type CheckinDeletedEventEvent = ClosedEnum<
  typeof CheckinDeletedEventEvent
>;

/**
 * Checkin Deleted Event
 */
export type CheckinDeletedEventRequestBody = {
  data: Data;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: CheckinDeletedEventEvent;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    customerId: z.string(),
    companyId: z.string(),
  });

/** @internal */
export type Data$Outbound = {
  id: string;
  customerId: string;
  companyId: string;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    customerId: z.string(),
    companyId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const CheckinDeletedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof CheckinDeletedEventEvent
> = z.nativeEnum(CheckinDeletedEventEvent);

/** @internal */
export const CheckinDeletedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof CheckinDeletedEventEvent
> = CheckinDeletedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckinDeletedEventEvent$ {
  /** @deprecated use `CheckinDeletedEventEvent$inboundSchema` instead. */
  export const inboundSchema = CheckinDeletedEventEvent$inboundSchema;
  /** @deprecated use `CheckinDeletedEventEvent$outboundSchema` instead. */
  export const outboundSchema = CheckinDeletedEventEvent$outboundSchema;
}

/** @internal */
export const CheckinDeletedEventRequestBody$inboundSchema: z.ZodType<
  CheckinDeletedEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
  created: z.number().int(),
  event: CheckinDeletedEventEvent$inboundSchema,
});

/** @internal */
export type CheckinDeletedEventRequestBody$Outbound = {
  data: Data$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const CheckinDeletedEventRequestBody$outboundSchema: z.ZodType<
  CheckinDeletedEventRequestBody$Outbound,
  z.ZodTypeDef,
  CheckinDeletedEventRequestBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
  created: z.number().int(),
  event: CheckinDeletedEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckinDeletedEventRequestBody$ {
  /** @deprecated use `CheckinDeletedEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = CheckinDeletedEventRequestBody$inboundSchema;
  /** @deprecated use `CheckinDeletedEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = CheckinDeletedEventRequestBody$outboundSchema;
  /** @deprecated use `CheckinDeletedEventRequestBody$Outbound` instead. */
  export type Outbound = CheckinDeletedEventRequestBody$Outbound;
}

export function checkinDeletedEventRequestBodyToJSON(
  checkinDeletedEventRequestBody: CheckinDeletedEventRequestBody,
): string {
  return JSON.stringify(
    CheckinDeletedEventRequestBody$outboundSchema.parse(
      checkinDeletedEventRequestBody,
    ),
  );
}

export function checkinDeletedEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CheckinDeletedEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckinDeletedEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckinDeletedEventRequestBody' from JSON`,
  );
}
