/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CustomerCreatedEventEvent = {
  CustomerCreated: "customer.created",
} as const;
export type CustomerCreatedEventEvent = ClosedEnum<
  typeof CustomerCreatedEventEvent
>;

/**
 * Customer Created Event
 */
export type CustomerCreatedEventRequestBody = {
  /**
   * Schema representing a customer, former customer, or lead served by the company
   */
  data: components.Customer;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: CustomerCreatedEventEvent;
};

/** @internal */
export const CustomerCreatedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof CustomerCreatedEventEvent
> = z.nativeEnum(CustomerCreatedEventEvent);

/** @internal */
export const CustomerCreatedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof CustomerCreatedEventEvent
> = CustomerCreatedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerCreatedEventEvent$ {
  /** @deprecated use `CustomerCreatedEventEvent$inboundSchema` instead. */
  export const inboundSchema = CustomerCreatedEventEvent$inboundSchema;
  /** @deprecated use `CustomerCreatedEventEvent$outboundSchema` instead. */
  export const outboundSchema = CustomerCreatedEventEvent$outboundSchema;
}

/** @internal */
export const CustomerCreatedEventRequestBody$inboundSchema: z.ZodType<
  CustomerCreatedEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Customer$inboundSchema,
  created: z.number().int(),
  event: CustomerCreatedEventEvent$inboundSchema,
});

/** @internal */
export type CustomerCreatedEventRequestBody$Outbound = {
  data: components.Customer$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const CustomerCreatedEventRequestBody$outboundSchema: z.ZodType<
  CustomerCreatedEventRequestBody$Outbound,
  z.ZodTypeDef,
  CustomerCreatedEventRequestBody
> = z.object({
  data: components.Customer$outboundSchema,
  created: z.number().int(),
  event: CustomerCreatedEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerCreatedEventRequestBody$ {
  /** @deprecated use `CustomerCreatedEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = CustomerCreatedEventRequestBody$inboundSchema;
  /** @deprecated use `CustomerCreatedEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = CustomerCreatedEventRequestBody$outboundSchema;
  /** @deprecated use `CustomerCreatedEventRequestBody$Outbound` instead. */
  export type Outbound = CustomerCreatedEventRequestBody$Outbound;
}

export function customerCreatedEventRequestBodyToJSON(
  customerCreatedEventRequestBody: CustomerCreatedEventRequestBody,
): string {
  return JSON.stringify(
    CustomerCreatedEventRequestBody$outboundSchema.parse(
      customerCreatedEventRequestBody,
    ),
  );
}

export function customerCreatedEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomerCreatedEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerCreatedEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerCreatedEventRequestBody' from JSON`,
  );
}
