/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AppointmentNoShowEventEvent = {
  AppointmentNoshow: "appointment.noshow",
} as const;
export type AppointmentNoShowEventEvent = ClosedEnum<
  typeof AppointmentNoShowEventEvent
>;

/**
 * Apointment No Show Event (Not implemented)
 */
export type AppointmentNoShowEventRequestBody = {
  /**
   * Schema for representing a Regsitration for some scheduled event
   */
  data: components.Appointment;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: AppointmentNoShowEventEvent;
};

/** @internal */
export const AppointmentNoShowEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof AppointmentNoShowEventEvent
> = z.nativeEnum(AppointmentNoShowEventEvent);

/** @internal */
export const AppointmentNoShowEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof AppointmentNoShowEventEvent
> = AppointmentNoShowEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentNoShowEventEvent$ {
  /** @deprecated use `AppointmentNoShowEventEvent$inboundSchema` instead. */
  export const inboundSchema = AppointmentNoShowEventEvent$inboundSchema;
  /** @deprecated use `AppointmentNoShowEventEvent$outboundSchema` instead. */
  export const outboundSchema = AppointmentNoShowEventEvent$outboundSchema;
}

/** @internal */
export const AppointmentNoShowEventRequestBody$inboundSchema: z.ZodType<
  AppointmentNoShowEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Appointment$inboundSchema,
  created: z.number().int(),
  event: AppointmentNoShowEventEvent$inboundSchema,
});

/** @internal */
export type AppointmentNoShowEventRequestBody$Outbound = {
  data: components.Appointment$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const AppointmentNoShowEventRequestBody$outboundSchema: z.ZodType<
  AppointmentNoShowEventRequestBody$Outbound,
  z.ZodTypeDef,
  AppointmentNoShowEventRequestBody
> = z.object({
  data: components.Appointment$outboundSchema,
  created: z.number().int(),
  event: AppointmentNoShowEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentNoShowEventRequestBody$ {
  /** @deprecated use `AppointmentNoShowEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = AppointmentNoShowEventRequestBody$inboundSchema;
  /** @deprecated use `AppointmentNoShowEventRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AppointmentNoShowEventRequestBody$outboundSchema;
  /** @deprecated use `AppointmentNoShowEventRequestBody$Outbound` instead. */
  export type Outbound = AppointmentNoShowEventRequestBody$Outbound;
}

export function appointmentNoShowEventRequestBodyToJSON(
  appointmentNoShowEventRequestBody: AppointmentNoShowEventRequestBody,
): string {
  return JSON.stringify(
    AppointmentNoShowEventRequestBody$outboundSchema.parse(
      appointmentNoShowEventRequestBody,
    ),
  );
}

export function appointmentNoShowEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AppointmentNoShowEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppointmentNoShowEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppointmentNoShowEventRequestBody' from JSON`,
  );
}
