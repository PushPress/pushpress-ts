/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ClassCanceledEventEvent = {
  ClassCanceled: "class.canceled",
} as const;
export type ClassCanceledEventEvent = ClosedEnum<
  typeof ClassCanceledEventEvent
>;

/**
 * Class Canceled Event
 */
export type ClassCanceledEventRequestBody = {
  /**
   * Schema for representing a scheduled class
   */
  data: components.Class;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: ClassCanceledEventEvent;
};

/** @internal */
export const ClassCanceledEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof ClassCanceledEventEvent
> = z.nativeEnum(ClassCanceledEventEvent);

/** @internal */
export const ClassCanceledEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof ClassCanceledEventEvent
> = ClassCanceledEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClassCanceledEventEvent$ {
  /** @deprecated use `ClassCanceledEventEvent$inboundSchema` instead. */
  export const inboundSchema = ClassCanceledEventEvent$inboundSchema;
  /** @deprecated use `ClassCanceledEventEvent$outboundSchema` instead. */
  export const outboundSchema = ClassCanceledEventEvent$outboundSchema;
}

/** @internal */
export const ClassCanceledEventRequestBody$inboundSchema: z.ZodType<
  ClassCanceledEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Class$inboundSchema,
  created: z.number().int(),
  event: ClassCanceledEventEvent$inboundSchema,
});

/** @internal */
export type ClassCanceledEventRequestBody$Outbound = {
  data: components.Class$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const ClassCanceledEventRequestBody$outboundSchema: z.ZodType<
  ClassCanceledEventRequestBody$Outbound,
  z.ZodTypeDef,
  ClassCanceledEventRequestBody
> = z.object({
  data: components.Class$outboundSchema,
  created: z.number().int(),
  event: ClassCanceledEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClassCanceledEventRequestBody$ {
  /** @deprecated use `ClassCanceledEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = ClassCanceledEventRequestBody$inboundSchema;
  /** @deprecated use `ClassCanceledEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = ClassCanceledEventRequestBody$outboundSchema;
  /** @deprecated use `ClassCanceledEventRequestBody$Outbound` instead. */
  export type Outbound = ClassCanceledEventRequestBody$Outbound;
}

export function classCanceledEventRequestBodyToJSON(
  classCanceledEventRequestBody: ClassCanceledEventRequestBody,
): string {
  return JSON.stringify(
    ClassCanceledEventRequestBody$outboundSchema.parse(
      classCanceledEventRequestBody,
    ),
  );
}

export function classCanceledEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClassCanceledEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClassCanceledEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClassCanceledEventRequestBody' from JSON`,
  );
}
