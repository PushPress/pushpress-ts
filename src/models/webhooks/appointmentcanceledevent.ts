/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AppointmentCanceledEventEvent = {
  AppointmentCanceled: "appointment.canceled",
} as const;
export type AppointmentCanceledEventEvent = ClosedEnum<
  typeof AppointmentCanceledEventEvent
>;

/**
 * Appointment Canceled Event
 */
export type AppointmentCanceledEventRequestBody = {
  /**
   * Schema for representing a Regsitration for some scheduled event
   */
  data: components.Appointment;
  /**
   * Unix timestamp representing when the event was created
   */
  created: number;
  event: AppointmentCanceledEventEvent;
};

/** @internal */
export const AppointmentCanceledEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof AppointmentCanceledEventEvent
> = z.nativeEnum(AppointmentCanceledEventEvent);

/** @internal */
export const AppointmentCanceledEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof AppointmentCanceledEventEvent
> = AppointmentCanceledEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentCanceledEventEvent$ {
  /** @deprecated use `AppointmentCanceledEventEvent$inboundSchema` instead. */
  export const inboundSchema = AppointmentCanceledEventEvent$inboundSchema;
  /** @deprecated use `AppointmentCanceledEventEvent$outboundSchema` instead. */
  export const outboundSchema = AppointmentCanceledEventEvent$outboundSchema;
}

/** @internal */
export const AppointmentCanceledEventRequestBody$inboundSchema: z.ZodType<
  AppointmentCanceledEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Appointment$inboundSchema,
  created: z.number().int(),
  event: AppointmentCanceledEventEvent$inboundSchema,
});

/** @internal */
export type AppointmentCanceledEventRequestBody$Outbound = {
  data: components.Appointment$Outbound;
  created: number;
  event: string;
};

/** @internal */
export const AppointmentCanceledEventRequestBody$outboundSchema: z.ZodType<
  AppointmentCanceledEventRequestBody$Outbound,
  z.ZodTypeDef,
  AppointmentCanceledEventRequestBody
> = z.object({
  data: components.Appointment$outboundSchema,
  created: z.number().int(),
  event: AppointmentCanceledEventEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentCanceledEventRequestBody$ {
  /** @deprecated use `AppointmentCanceledEventRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AppointmentCanceledEventRequestBody$inboundSchema;
  /** @deprecated use `AppointmentCanceledEventRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AppointmentCanceledEventRequestBody$outboundSchema;
  /** @deprecated use `AppointmentCanceledEventRequestBody$Outbound` instead. */
  export type Outbound = AppointmentCanceledEventRequestBody$Outbound;
}

export function appointmentCanceledEventRequestBodyToJSON(
  appointmentCanceledEventRequestBody: AppointmentCanceledEventRequestBody,
): string {
  return JSON.stringify(
    AppointmentCanceledEventRequestBody$outboundSchema.parse(
      appointmentCanceledEventRequestBody,
    ),
  );
}

export function appointmentCanceledEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AppointmentCanceledEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AppointmentCanceledEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppointmentCanceledEventRequestBody' from JSON`,
  );
}
