/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$ } from "../../lib/schemas.js";
import { PushPressError } from "./pushpresserror.js";

/**
 * A collection of codes that generally means the end user got something wrong in making the request
 */
export type BadRequestData = {
  message?: string | undefined;

  additionalProperties: { [k: string]: any };
};

/**
 * A collection of codes that generally means the end user got something wrong in making the request
 */
export class BadRequest extends PushPressError {
  additionalProperties: { [k: string]: any } = {};

  /** The original data that was passed to this error instance. */
  data$: BadRequestData;

  constructor(
    err: BadRequestData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.additionalProperties != null) {
      this.additionalProperties = err.additionalProperties;
    }

    this.name = "BadRequest";
  }
}

/** @internal */
export const BadRequest$inboundSchema: z.ZodType<
  BadRequest,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .catchall(z.any()),
  "additionalProperties",
  true,
)
  .transform((v) => {
    return new BadRequest(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type BadRequest$Outbound = {
  message?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const BadRequest$outboundSchema: z.ZodType<
  BadRequest$Outbound,
  z.ZodTypeDef,
  BadRequest
> = z.instanceof(BadRequest)
  .transform(v => v.data$)
  .pipe(
    z.object({
      message: z.string().optional(),
      additionalProperties: z.record(z.any()),
    }).transform((v) => {
      return {
        ...v.additionalProperties,
        ...remap$(v, {
          additionalProperties: null,
        }),
      };
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequest$ {
  /** @deprecated use `BadRequest$inboundSchema` instead. */
  export const inboundSchema = BadRequest$inboundSchema;
  /** @deprecated use `BadRequest$outboundSchema` instead. */
  export const outboundSchema = BadRequest$outboundSchema;
  /** @deprecated use `BadRequest$Outbound` instead. */
  export type Outbound = BadRequest$Outbound;
}
