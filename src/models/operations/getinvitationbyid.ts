/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInvitationByIdGlobals = {
  companyId?: string | undefined;
};

export type GetInvitationByIdRequest = {
  /**
   * Invitation id
   */
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/** @internal */
export const GetInvitationByIdGlobals$inboundSchema: z.ZodType<
  GetInvitationByIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetInvitationByIdGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetInvitationByIdGlobals$outboundSchema: z.ZodType<
  GetInvitationByIdGlobals$Outbound,
  z.ZodTypeDef,
  GetInvitationByIdGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvitationByIdGlobals$ {
  /** @deprecated use `GetInvitationByIdGlobals$inboundSchema` instead. */
  export const inboundSchema = GetInvitationByIdGlobals$inboundSchema;
  /** @deprecated use `GetInvitationByIdGlobals$outboundSchema` instead. */
  export const outboundSchema = GetInvitationByIdGlobals$outboundSchema;
  /** @deprecated use `GetInvitationByIdGlobals$Outbound` instead. */
  export type Outbound = GetInvitationByIdGlobals$Outbound;
}

export function getInvitationByIdGlobalsToJSON(
  getInvitationByIdGlobals: GetInvitationByIdGlobals,
): string {
  return JSON.stringify(
    GetInvitationByIdGlobals$outboundSchema.parse(getInvitationByIdGlobals),
  );
}

export function getInvitationByIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetInvitationByIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvitationByIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvitationByIdGlobals' from JSON`,
  );
}

/** @internal */
export const GetInvitationByIdRequest$inboundSchema: z.ZodType<
  GetInvitationByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetInvitationByIdRequest$Outbound = {
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetInvitationByIdRequest$outboundSchema: z.ZodType<
  GetInvitationByIdRequest$Outbound,
  z.ZodTypeDef,
  GetInvitationByIdRequest
> = z.object({
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvitationByIdRequest$ {
  /** @deprecated use `GetInvitationByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetInvitationByIdRequest$inboundSchema;
  /** @deprecated use `GetInvitationByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetInvitationByIdRequest$outboundSchema;
  /** @deprecated use `GetInvitationByIdRequest$Outbound` instead. */
  export type Outbound = GetInvitationByIdRequest$Outbound;
}

export function getInvitationByIdRequestToJSON(
  getInvitationByIdRequest: GetInvitationByIdRequest,
): string {
  return JSON.stringify(
    GetInvitationByIdRequest$outboundSchema.parse(getInvitationByIdRequest),
  );
}

export function getInvitationByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInvitationByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvitationByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvitationByIdRequest' from JSON`,
  );
}
