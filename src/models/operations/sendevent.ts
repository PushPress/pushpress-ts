/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type SendEventGlobals = {
  companyId?: string | undefined;
};

export type SendEventRequestBody = {
  /**
   * Ably channel to send the event to. This is the name of the channel that the client will subscribe to.
   */
  channel: string;
  /**
   * event to send
   */
  event: string;
  /**
   * Optional metadata to attach to the event
   */
  data?: any | undefined;
};

export type SendEventRequest = {
  companyId?: string | undefined;
  requestBody: SendEventRequestBody;
};

export type InvalidAliases = {
  externalId: Array<string>;
};

export type Errors = {
  invalidAliases: InvalidAliases;
};

/**
 * Default Response
 */
export type SendEventResponseBody = {
  id?: string | undefined;
  externalId?: string | null | undefined;
  errors?: Errors | undefined;
};

/** @internal */
export const SendEventGlobals$inboundSchema: z.ZodType<
  SendEventGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type SendEventGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const SendEventGlobals$outboundSchema: z.ZodType<
  SendEventGlobals$Outbound,
  z.ZodTypeDef,
  SendEventGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEventGlobals$ {
  /** @deprecated use `SendEventGlobals$inboundSchema` instead. */
  export const inboundSchema = SendEventGlobals$inboundSchema;
  /** @deprecated use `SendEventGlobals$outboundSchema` instead. */
  export const outboundSchema = SendEventGlobals$outboundSchema;
  /** @deprecated use `SendEventGlobals$Outbound` instead. */
  export type Outbound = SendEventGlobals$Outbound;
}

/** @internal */
export const SendEventRequestBody$inboundSchema: z.ZodType<
  SendEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: z.string(),
  event: z.string(),
  data: z.any().optional(),
});

/** @internal */
export type SendEventRequestBody$Outbound = {
  channel: string;
  event: string;
  data?: any | undefined;
};

/** @internal */
export const SendEventRequestBody$outboundSchema: z.ZodType<
  SendEventRequestBody$Outbound,
  z.ZodTypeDef,
  SendEventRequestBody
> = z.object({
  channel: z.string(),
  event: z.string(),
  data: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEventRequestBody$ {
  /** @deprecated use `SendEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendEventRequestBody$inboundSchema;
  /** @deprecated use `SendEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendEventRequestBody$outboundSchema;
  /** @deprecated use `SendEventRequestBody$Outbound` instead. */
  export type Outbound = SendEventRequestBody$Outbound;
}

/** @internal */
export const SendEventRequest$inboundSchema: z.ZodType<
  SendEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
  RequestBody: z.lazy(() => SendEventRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SendEventRequest$Outbound = {
  "company-id"?: string | undefined;
  RequestBody: SendEventRequestBody$Outbound;
};

/** @internal */
export const SendEventRequest$outboundSchema: z.ZodType<
  SendEventRequest$Outbound,
  z.ZodTypeDef,
  SendEventRequest
> = z.object({
  companyId: z.string().optional(),
  requestBody: z.lazy(() => SendEventRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEventRequest$ {
  /** @deprecated use `SendEventRequest$inboundSchema` instead. */
  export const inboundSchema = SendEventRequest$inboundSchema;
  /** @deprecated use `SendEventRequest$outboundSchema` instead. */
  export const outboundSchema = SendEventRequest$outboundSchema;
  /** @deprecated use `SendEventRequest$Outbound` instead. */
  export type Outbound = SendEventRequest$Outbound;
}

/** @internal */
export const InvalidAliases$inboundSchema: z.ZodType<
  InvalidAliases,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type InvalidAliases$Outbound = {
  external_id: Array<string>;
};

/** @internal */
export const InvalidAliases$outboundSchema: z.ZodType<
  InvalidAliases$Outbound,
  z.ZodTypeDef,
  InvalidAliases
> = z.object({
  externalId: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidAliases$ {
  /** @deprecated use `InvalidAliases$inboundSchema` instead. */
  export const inboundSchema = InvalidAliases$inboundSchema;
  /** @deprecated use `InvalidAliases$outboundSchema` instead. */
  export const outboundSchema = InvalidAliases$outboundSchema;
  /** @deprecated use `InvalidAliases$Outbound` instead. */
  export type Outbound = InvalidAliases$Outbound;
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({
    invalid_aliases: z.lazy(() => InvalidAliases$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "invalid_aliases": "invalidAliases",
    });
  });

/** @internal */
export type Errors$Outbound = {
  invalid_aliases: InvalidAliases$Outbound;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({
  invalidAliases: z.lazy(() => InvalidAliases$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    invalidAliases: "invalid_aliases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

/** @internal */
export const SendEventResponseBody$inboundSchema: z.ZodType<
  SendEventResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  external_id: z.nullable(z.string()).optional(),
  errors: z.lazy(() => Errors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type SendEventResponseBody$Outbound = {
  id?: string | undefined;
  external_id?: string | null | undefined;
  errors?: Errors$Outbound | undefined;
};

/** @internal */
export const SendEventResponseBody$outboundSchema: z.ZodType<
  SendEventResponseBody$Outbound,
  z.ZodTypeDef,
  SendEventResponseBody
> = z.object({
  id: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  errors: z.lazy(() => Errors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEventResponseBody$ {
  /** @deprecated use `SendEventResponseBody$inboundSchema` instead. */
  export const inboundSchema = SendEventResponseBody$inboundSchema;
  /** @deprecated use `SendEventResponseBody$outboundSchema` instead. */
  export const outboundSchema = SendEventResponseBody$outboundSchema;
  /** @deprecated use `SendEventResponseBody$Outbound` instead. */
  export type Outbound = SendEventResponseBody$Outbound;
}
