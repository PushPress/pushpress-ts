/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAttributionGlobals = {
  companyId?: string | undefined;
};

export const Event = {
  Signup: "signup",
  ClientSignup: "client_signup",
} as const;
export type Event = ClosedEnum<typeof Event>;

export type CreateAttributionRequestBody = {
  customerId: string;
  event: Event;
  /**
   * Referer URL
   */
  referer?: string | null | undefined;
  /**
   * UTM source
   */
  utmSource?: string | null | undefined;
  /**
   * UTM medium
   */
  utmMedium?: string | null | undefined;
  /**
   * UTM campaign
   */
  utmCampaign?: string | null | undefined;
  /**
   * UTM content
   */
  utmContent?: string | null | undefined;
  /**
   * UTM term
   */
  utmTerm?: string | null | undefined;
  /**
   * Raw URL
   */
  rawUrl?: string | null | undefined;
  /**
   * Normalized URL
   */
  url?: string | null | undefined;
  /**
   * Facebook click identifier
   */
  fbclid?: string | null | undefined;
  /**
   * Google Ads click identifier
   */
  gclid?: string | null | undefined;
  /**
   * Microsoft Ads click identifier
   */
  msclkid?: string | null | undefined;
  /**
   * DoubleClick click identifier
   */
  dclid?: string | null | undefined;
  /**
   * User agent
   */
  userAgent?: string | null | undefined;
  /**
   * IP address
   */
  ipAddress?: string | null | undefined;
};

export type CreateAttributionRequest = {
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
  requestBody: CreateAttributionRequestBody;
};

export const CreateAttributionEvent = {
  Signup: "signup",
  ClientSignup: "client_signup",
} as const;
export type CreateAttributionEvent = ClosedEnum<typeof CreateAttributionEvent>;

/**
 * Default Response
 */
export type CreateAttributionResponseBody = {
  customerId: string;
  companyId: string;
  event: CreateAttributionEvent;
  /**
   * The referer URL of the customer, industry accepted typo of referrer
   */
  referer?: string | null | undefined;
  utmSource?: string | null | undefined;
  utmMedium?: string | null | undefined;
  utmCampaign?: string | null | undefined;
  utmContent?: string | null | undefined;
  utmTerm?: string | null | undefined;
};

/** @internal */
export const CreateAttributionGlobals$inboundSchema: z.ZodType<
  CreateAttributionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type CreateAttributionGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const CreateAttributionGlobals$outboundSchema: z.ZodType<
  CreateAttributionGlobals$Outbound,
  z.ZodTypeDef,
  CreateAttributionGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAttributionGlobals$ {
  /** @deprecated use `CreateAttributionGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateAttributionGlobals$inboundSchema;
  /** @deprecated use `CreateAttributionGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateAttributionGlobals$outboundSchema;
  /** @deprecated use `CreateAttributionGlobals$Outbound` instead. */
  export type Outbound = CreateAttributionGlobals$Outbound;
}

export function createAttributionGlobalsToJSON(
  createAttributionGlobals: CreateAttributionGlobals,
): string {
  return JSON.stringify(
    CreateAttributionGlobals$outboundSchema.parse(createAttributionGlobals),
  );
}

export function createAttributionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateAttributionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAttributionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAttributionGlobals' from JSON`,
  );
}

/** @internal */
export const Event$inboundSchema: z.ZodNativeEnum<typeof Event> = z.nativeEnum(
  Event,
);

/** @internal */
export const Event$outboundSchema: z.ZodNativeEnum<typeof Event> =
  Event$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
}

/** @internal */
export const CreateAttributionRequestBody$inboundSchema: z.ZodType<
  CreateAttributionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  event: Event$inboundSchema,
  referer: z.nullable(z.string()).optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
  rawUrl: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
  fbclid: z.nullable(z.string()).optional(),
  gclid: z.nullable(z.string()).optional(),
  msclkid: z.nullable(z.string()).optional(),
  dclid: z.nullable(z.string()).optional(),
  userAgent: z.nullable(z.string()).optional(),
  ipAddress: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateAttributionRequestBody$Outbound = {
  customerId: string;
  event: string;
  referer?: string | null | undefined;
  utmSource?: string | null | undefined;
  utmMedium?: string | null | undefined;
  utmCampaign?: string | null | undefined;
  utmContent?: string | null | undefined;
  utmTerm?: string | null | undefined;
  rawUrl?: string | null | undefined;
  url?: string | null | undefined;
  fbclid?: string | null | undefined;
  gclid?: string | null | undefined;
  msclkid?: string | null | undefined;
  dclid?: string | null | undefined;
  userAgent?: string | null | undefined;
  ipAddress?: string | null | undefined;
};

/** @internal */
export const CreateAttributionRequestBody$outboundSchema: z.ZodType<
  CreateAttributionRequestBody$Outbound,
  z.ZodTypeDef,
  CreateAttributionRequestBody
> = z.object({
  customerId: z.string(),
  event: Event$outboundSchema,
  referer: z.nullable(z.string()).optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
  rawUrl: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
  fbclid: z.nullable(z.string()).optional(),
  gclid: z.nullable(z.string()).optional(),
  msclkid: z.nullable(z.string()).optional(),
  dclid: z.nullable(z.string()).optional(),
  userAgent: z.nullable(z.string()).optional(),
  ipAddress: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAttributionRequestBody$ {
  /** @deprecated use `CreateAttributionRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateAttributionRequestBody$inboundSchema;
  /** @deprecated use `CreateAttributionRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateAttributionRequestBody$outboundSchema;
  /** @deprecated use `CreateAttributionRequestBody$Outbound` instead. */
  export type Outbound = CreateAttributionRequestBody$Outbound;
}

export function createAttributionRequestBodyToJSON(
  createAttributionRequestBody: CreateAttributionRequestBody,
): string {
  return JSON.stringify(
    CreateAttributionRequestBody$outboundSchema.parse(
      createAttributionRequestBody,
    ),
  );
}

export function createAttributionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAttributionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAttributionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAttributionRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateAttributionRequest$inboundSchema: z.ZodType<
  CreateAttributionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
  RequestBody: z.lazy(() => CreateAttributionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateAttributionRequest$Outbound = {
  "company-id"?: string | undefined;
  RequestBody: CreateAttributionRequestBody$Outbound;
};

/** @internal */
export const CreateAttributionRequest$outboundSchema: z.ZodType<
  CreateAttributionRequest$Outbound,
  z.ZodTypeDef,
  CreateAttributionRequest
> = z.object({
  companyId: z.string().optional(),
  requestBody: z.lazy(() => CreateAttributionRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAttributionRequest$ {
  /** @deprecated use `CreateAttributionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAttributionRequest$inboundSchema;
  /** @deprecated use `CreateAttributionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAttributionRequest$outboundSchema;
  /** @deprecated use `CreateAttributionRequest$Outbound` instead. */
  export type Outbound = CreateAttributionRequest$Outbound;
}

export function createAttributionRequestToJSON(
  createAttributionRequest: CreateAttributionRequest,
): string {
  return JSON.stringify(
    CreateAttributionRequest$outboundSchema.parse(createAttributionRequest),
  );
}

export function createAttributionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAttributionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAttributionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAttributionRequest' from JSON`,
  );
}

/** @internal */
export const CreateAttributionEvent$inboundSchema: z.ZodNativeEnum<
  typeof CreateAttributionEvent
> = z.nativeEnum(CreateAttributionEvent);

/** @internal */
export const CreateAttributionEvent$outboundSchema: z.ZodNativeEnum<
  typeof CreateAttributionEvent
> = CreateAttributionEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAttributionEvent$ {
  /** @deprecated use `CreateAttributionEvent$inboundSchema` instead. */
  export const inboundSchema = CreateAttributionEvent$inboundSchema;
  /** @deprecated use `CreateAttributionEvent$outboundSchema` instead. */
  export const outboundSchema = CreateAttributionEvent$outboundSchema;
}

/** @internal */
export const CreateAttributionResponseBody$inboundSchema: z.ZodType<
  CreateAttributionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  companyId: z.string(),
  event: CreateAttributionEvent$inboundSchema,
  referer: z.nullable(z.string()).optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateAttributionResponseBody$Outbound = {
  customerId: string;
  companyId: string;
  event: string;
  referer?: string | null | undefined;
  utmSource?: string | null | undefined;
  utmMedium?: string | null | undefined;
  utmCampaign?: string | null | undefined;
  utmContent?: string | null | undefined;
  utmTerm?: string | null | undefined;
};

/** @internal */
export const CreateAttributionResponseBody$outboundSchema: z.ZodType<
  CreateAttributionResponseBody$Outbound,
  z.ZodTypeDef,
  CreateAttributionResponseBody
> = z.object({
  customerId: z.string(),
  companyId: z.string(),
  event: CreateAttributionEvent$outboundSchema,
  referer: z.nullable(z.string()).optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAttributionResponseBody$ {
  /** @deprecated use `CreateAttributionResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateAttributionResponseBody$inboundSchema;
  /** @deprecated use `CreateAttributionResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateAttributionResponseBody$outboundSchema;
  /** @deprecated use `CreateAttributionResponseBody$Outbound` instead. */
  export type Outbound = CreateAttributionResponseBody$Outbound;
}

export function createAttributionResponseBodyToJSON(
  createAttributionResponseBody: CreateAttributionResponseBody,
): string {
  return JSON.stringify(
    CreateAttributionResponseBody$outboundSchema.parse(
      createAttributionResponseBody,
    ),
  );
}

export function createAttributionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAttributionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAttributionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAttributionResponseBody' from JSON`,
  );
}
