/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiKeyGlobals = {
  companyId?: string | undefined;
};

export type DeleteApiKeySecurity = {
  bearer: string;
};

export type DeleteApiKeyRequest = {
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/** @internal */
export const DeleteApiKeyGlobals$inboundSchema: z.ZodType<
  DeleteApiKeyGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type DeleteApiKeyGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const DeleteApiKeyGlobals$outboundSchema: z.ZodType<
  DeleteApiKeyGlobals$Outbound,
  z.ZodTypeDef,
  DeleteApiKeyGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiKeyGlobals$ {
  /** @deprecated use `DeleteApiKeyGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteApiKeyGlobals$inboundSchema;
  /** @deprecated use `DeleteApiKeyGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteApiKeyGlobals$outboundSchema;
  /** @deprecated use `DeleteApiKeyGlobals$Outbound` instead. */
  export type Outbound = DeleteApiKeyGlobals$Outbound;
}

export function deleteApiKeyGlobalsToJSON(
  deleteApiKeyGlobals: DeleteApiKeyGlobals,
): string {
  return JSON.stringify(
    DeleteApiKeyGlobals$outboundSchema.parse(deleteApiKeyGlobals),
  );
}

export function deleteApiKeyGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiKeyGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiKeyGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiKeyGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteApiKeySecurity$inboundSchema: z.ZodType<
  DeleteApiKeySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type DeleteApiKeySecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const DeleteApiKeySecurity$outboundSchema: z.ZodType<
  DeleteApiKeySecurity$Outbound,
  z.ZodTypeDef,
  DeleteApiKeySecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiKeySecurity$ {
  /** @deprecated use `DeleteApiKeySecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteApiKeySecurity$inboundSchema;
  /** @deprecated use `DeleteApiKeySecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteApiKeySecurity$outboundSchema;
  /** @deprecated use `DeleteApiKeySecurity$Outbound` instead. */
  export type Outbound = DeleteApiKeySecurity$Outbound;
}

export function deleteApiKeySecurityToJSON(
  deleteApiKeySecurity: DeleteApiKeySecurity,
): string {
  return JSON.stringify(
    DeleteApiKeySecurity$outboundSchema.parse(deleteApiKeySecurity),
  );
}

export function deleteApiKeySecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiKeySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiKeySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiKeySecurity' from JSON`,
  );
}

/** @internal */
export const DeleteApiKeyRequest$inboundSchema: z.ZodType<
  DeleteApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type DeleteApiKeyRequest$Outbound = {
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const DeleteApiKeyRequest$outboundSchema: z.ZodType<
  DeleteApiKeyRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiKeyRequest
> = z.object({
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiKeyRequest$ {
  /** @deprecated use `DeleteApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiKeyRequest$inboundSchema;
  /** @deprecated use `DeleteApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiKeyRequest$outboundSchema;
  /** @deprecated use `DeleteApiKeyRequest$Outbound` instead. */
  export type Outbound = DeleteApiKeyRequest$Outbound;
}

export function deleteApiKeyRequestToJSON(
  deleteApiKeyRequest: DeleteApiKeyRequest,
): string {
  return JSON.stringify(
    DeleteApiKeyRequest$outboundSchema.parse(deleteApiKeyRequest),
  );
}

export function deleteApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiKeyRequest' from JSON`,
  );
}
