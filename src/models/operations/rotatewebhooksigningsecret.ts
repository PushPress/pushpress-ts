/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RotateWebhookSigningSecretGlobals = {
  companyId?: string | undefined;
};

export type RotateWebhookSigningSecretRequest = {
  uuid: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/**
 * Default Response
 */
export type RotateWebhookSigningSecretResponseBody = {
  webhookUuid: string;
  signingSecret: string;
};

/** @internal */
export const RotateWebhookSigningSecretGlobals$inboundSchema: z.ZodType<
  RotateWebhookSigningSecretGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type RotateWebhookSigningSecretGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const RotateWebhookSigningSecretGlobals$outboundSchema: z.ZodType<
  RotateWebhookSigningSecretGlobals$Outbound,
  z.ZodTypeDef,
  RotateWebhookSigningSecretGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RotateWebhookSigningSecretGlobals$ {
  /** @deprecated use `RotateWebhookSigningSecretGlobals$inboundSchema` instead. */
  export const inboundSchema = RotateWebhookSigningSecretGlobals$inboundSchema;
  /** @deprecated use `RotateWebhookSigningSecretGlobals$outboundSchema` instead. */
  export const outboundSchema =
    RotateWebhookSigningSecretGlobals$outboundSchema;
  /** @deprecated use `RotateWebhookSigningSecretGlobals$Outbound` instead. */
  export type Outbound = RotateWebhookSigningSecretGlobals$Outbound;
}

export function rotateWebhookSigningSecretGlobalsToJSON(
  rotateWebhookSigningSecretGlobals: RotateWebhookSigningSecretGlobals,
): string {
  return JSON.stringify(
    RotateWebhookSigningSecretGlobals$outboundSchema.parse(
      rotateWebhookSigningSecretGlobals,
    ),
  );
}

export function rotateWebhookSigningSecretGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<RotateWebhookSigningSecretGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RotateWebhookSigningSecretGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RotateWebhookSigningSecretGlobals' from JSON`,
  );
}

/** @internal */
export const RotateWebhookSigningSecretRequest$inboundSchema: z.ZodType<
  RotateWebhookSigningSecretRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type RotateWebhookSigningSecretRequest$Outbound = {
  uuid: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const RotateWebhookSigningSecretRequest$outboundSchema: z.ZodType<
  RotateWebhookSigningSecretRequest$Outbound,
  z.ZodTypeDef,
  RotateWebhookSigningSecretRequest
> = z.object({
  uuid: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RotateWebhookSigningSecretRequest$ {
  /** @deprecated use `RotateWebhookSigningSecretRequest$inboundSchema` instead. */
  export const inboundSchema = RotateWebhookSigningSecretRequest$inboundSchema;
  /** @deprecated use `RotateWebhookSigningSecretRequest$outboundSchema` instead. */
  export const outboundSchema =
    RotateWebhookSigningSecretRequest$outboundSchema;
  /** @deprecated use `RotateWebhookSigningSecretRequest$Outbound` instead. */
  export type Outbound = RotateWebhookSigningSecretRequest$Outbound;
}

export function rotateWebhookSigningSecretRequestToJSON(
  rotateWebhookSigningSecretRequest: RotateWebhookSigningSecretRequest,
): string {
  return JSON.stringify(
    RotateWebhookSigningSecretRequest$outboundSchema.parse(
      rotateWebhookSigningSecretRequest,
    ),
  );
}

export function rotateWebhookSigningSecretRequestFromJSON(
  jsonString: string,
): SafeParseResult<RotateWebhookSigningSecretRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RotateWebhookSigningSecretRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RotateWebhookSigningSecretRequest' from JSON`,
  );
}

/** @internal */
export const RotateWebhookSigningSecretResponseBody$inboundSchema: z.ZodType<
  RotateWebhookSigningSecretResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhookUuid: z.string(),
  signingSecret: z.string(),
});

/** @internal */
export type RotateWebhookSigningSecretResponseBody$Outbound = {
  webhookUuid: string;
  signingSecret: string;
};

/** @internal */
export const RotateWebhookSigningSecretResponseBody$outboundSchema: z.ZodType<
  RotateWebhookSigningSecretResponseBody$Outbound,
  z.ZodTypeDef,
  RotateWebhookSigningSecretResponseBody
> = z.object({
  webhookUuid: z.string(),
  signingSecret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RotateWebhookSigningSecretResponseBody$ {
  /** @deprecated use `RotateWebhookSigningSecretResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RotateWebhookSigningSecretResponseBody$inboundSchema;
  /** @deprecated use `RotateWebhookSigningSecretResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RotateWebhookSigningSecretResponseBody$outboundSchema;
  /** @deprecated use `RotateWebhookSigningSecretResponseBody$Outbound` instead. */
  export type Outbound = RotateWebhookSigningSecretResponseBody$Outbound;
}

export function rotateWebhookSigningSecretResponseBodyToJSON(
  rotateWebhookSigningSecretResponseBody:
    RotateWebhookSigningSecretResponseBody,
): string {
  return JSON.stringify(
    RotateWebhookSigningSecretResponseBody$outboundSchema.parse(
      rotateWebhookSigningSecretResponseBody,
    ),
  );
}

export function rotateWebhookSigningSecretResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RotateWebhookSigningSecretResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RotateWebhookSigningSecretResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RotateWebhookSigningSecretResponseBody' from JSON`,
  );
}
