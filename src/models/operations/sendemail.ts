/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * Specify one or more recipients
 */
export type To = string | Array<string>;

/**
 * One or more reply-to addresses
 */
export type ReplyTo = string | Array<string>;

export type SendEmailRequestBody = {
  /**
   * Specify one or more recipients
   */
  to: string | Array<string>;
  subject: string;
  /**
   * The text email body
   */
  text: string;
  /**
   * The HTML email body
   */
  html: string;
  /**
   * The email sender name
   */
  from: string;
  /**
   * One or more reply-to addresses
   */
  replyTo?: string | Array<string> | undefined;
  /**
   * Optional email type
   */
  type?: string | undefined;
};

export type SendEmailRequest = {
  companyId?: any | undefined;
  requestBody: SendEmailRequestBody;
};

/** @internal */
export const To$inboundSchema: z.ZodType<To, z.ZodTypeDef, unknown> = z.union([
  z.string(),
  z.array(z.string()),
]);

/** @internal */
export type To$Outbound = string | Array<string>;

/** @internal */
export const To$outboundSchema: z.ZodType<To$Outbound, z.ZodTypeDef, To> = z
  .union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace To$ {
  /** @deprecated use `To$inboundSchema` instead. */
  export const inboundSchema = To$inboundSchema;
  /** @deprecated use `To$outboundSchema` instead. */
  export const outboundSchema = To$outboundSchema;
  /** @deprecated use `To$Outbound` instead. */
  export type Outbound = To$Outbound;
}

/** @internal */
export const ReplyTo$inboundSchema: z.ZodType<ReplyTo, z.ZodTypeDef, unknown> =
  z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ReplyTo$Outbound = string | Array<string>;

/** @internal */
export const ReplyTo$outboundSchema: z.ZodType<
  ReplyTo$Outbound,
  z.ZodTypeDef,
  ReplyTo
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReplyTo$ {
  /** @deprecated use `ReplyTo$inboundSchema` instead. */
  export const inboundSchema = ReplyTo$inboundSchema;
  /** @deprecated use `ReplyTo$outboundSchema` instead. */
  export const outboundSchema = ReplyTo$outboundSchema;
  /** @deprecated use `ReplyTo$Outbound` instead. */
  export type Outbound = ReplyTo$Outbound;
}

/** @internal */
export const SendEmailRequestBody$inboundSchema: z.ZodType<
  SendEmailRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  to: z.union([z.string(), z.array(z.string())]),
  subject: z.string(),
  text: z.string(),
  html: z.string(),
  from: z.string(),
  replyTo: z.union([z.string(), z.array(z.string())]).optional(),
  type: z.string().optional(),
});

/** @internal */
export type SendEmailRequestBody$Outbound = {
  to: string | Array<string>;
  subject: string;
  text: string;
  html: string;
  from: string;
  replyTo?: string | Array<string> | undefined;
  type?: string | undefined;
};

/** @internal */
export const SendEmailRequestBody$outboundSchema: z.ZodType<
  SendEmailRequestBody$Outbound,
  z.ZodTypeDef,
  SendEmailRequestBody
> = z.object({
  to: z.union([z.string(), z.array(z.string())]),
  subject: z.string(),
  text: z.string(),
  html: z.string(),
  from: z.string(),
  replyTo: z.union([z.string(), z.array(z.string())]).optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEmailRequestBody$ {
  /** @deprecated use `SendEmailRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendEmailRequestBody$inboundSchema;
  /** @deprecated use `SendEmailRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendEmailRequestBody$outboundSchema;
  /** @deprecated use `SendEmailRequestBody$Outbound` instead. */
  export type Outbound = SendEmailRequestBody$Outbound;
}

/** @internal */
export const SendEmailRequest$inboundSchema: z.ZodType<
  SendEmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.any().optional(),
  RequestBody: z.lazy(() => SendEmailRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SendEmailRequest$Outbound = {
  companyId?: any | undefined;
  RequestBody: SendEmailRequestBody$Outbound;
};

/** @internal */
export const SendEmailRequest$outboundSchema: z.ZodType<
  SendEmailRequest$Outbound,
  z.ZodTypeDef,
  SendEmailRequest
> = z.object({
  companyId: z.any().optional(),
  requestBody: z.lazy(() => SendEmailRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEmailRequest$ {
  /** @deprecated use `SendEmailRequest$inboundSchema` instead. */
  export const inboundSchema = SendEmailRequest$inboundSchema;
  /** @deprecated use `SendEmailRequest$outboundSchema` instead. */
  export const outboundSchema = SendEmailRequest$outboundSchema;
  /** @deprecated use `SendEmailRequest$Outbound` instead. */
  export type Outbound = SendEmailRequest$Outbound;
}
