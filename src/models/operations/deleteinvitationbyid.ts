/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteInvitationByIdGlobals = {
  companyId?: string | undefined;
};

export type DeleteInvitationByIdRequest = {
  /**
   * Invitation id
   */
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/**
 * Default Response
 */
export const DeleteInvitationByIdResponseBody = {
  NoContent: "No Content",
} as const;
/**
 * Default Response
 */
export type DeleteInvitationByIdResponseBody = ClosedEnum<
  typeof DeleteInvitationByIdResponseBody
>;

/** @internal */
export const DeleteInvitationByIdGlobals$inboundSchema: z.ZodType<
  DeleteInvitationByIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type DeleteInvitationByIdGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const DeleteInvitationByIdGlobals$outboundSchema: z.ZodType<
  DeleteInvitationByIdGlobals$Outbound,
  z.ZodTypeDef,
  DeleteInvitationByIdGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteInvitationByIdGlobals$ {
  /** @deprecated use `DeleteInvitationByIdGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteInvitationByIdGlobals$inboundSchema;
  /** @deprecated use `DeleteInvitationByIdGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteInvitationByIdGlobals$outboundSchema;
  /** @deprecated use `DeleteInvitationByIdGlobals$Outbound` instead. */
  export type Outbound = DeleteInvitationByIdGlobals$Outbound;
}

export function deleteInvitationByIdGlobalsToJSON(
  deleteInvitationByIdGlobals: DeleteInvitationByIdGlobals,
): string {
  return JSON.stringify(
    DeleteInvitationByIdGlobals$outboundSchema.parse(
      deleteInvitationByIdGlobals,
    ),
  );
}

export function deleteInvitationByIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteInvitationByIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteInvitationByIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteInvitationByIdGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteInvitationByIdRequest$inboundSchema: z.ZodType<
  DeleteInvitationByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type DeleteInvitationByIdRequest$Outbound = {
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const DeleteInvitationByIdRequest$outboundSchema: z.ZodType<
  DeleteInvitationByIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteInvitationByIdRequest
> = z.object({
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteInvitationByIdRequest$ {
  /** @deprecated use `DeleteInvitationByIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteInvitationByIdRequest$inboundSchema;
  /** @deprecated use `DeleteInvitationByIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteInvitationByIdRequest$outboundSchema;
  /** @deprecated use `DeleteInvitationByIdRequest$Outbound` instead. */
  export type Outbound = DeleteInvitationByIdRequest$Outbound;
}

export function deleteInvitationByIdRequestToJSON(
  deleteInvitationByIdRequest: DeleteInvitationByIdRequest,
): string {
  return JSON.stringify(
    DeleteInvitationByIdRequest$outboundSchema.parse(
      deleteInvitationByIdRequest,
    ),
  );
}

export function deleteInvitationByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteInvitationByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteInvitationByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteInvitationByIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteInvitationByIdResponseBody$inboundSchema: z.ZodNativeEnum<
  typeof DeleteInvitationByIdResponseBody
> = z.nativeEnum(DeleteInvitationByIdResponseBody);

/** @internal */
export const DeleteInvitationByIdResponseBody$outboundSchema: z.ZodNativeEnum<
  typeof DeleteInvitationByIdResponseBody
> = DeleteInvitationByIdResponseBody$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteInvitationByIdResponseBody$ {
  /** @deprecated use `DeleteInvitationByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteInvitationByIdResponseBody$inboundSchema;
  /** @deprecated use `DeleteInvitationByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteInvitationByIdResponseBody$outboundSchema;
}
