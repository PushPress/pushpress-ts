/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPlanGlobals = {
  companyId?: string | undefined;
};

export type GetPlanRequest = {
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/** @internal */
export const GetPlanGlobals$inboundSchema: z.ZodType<
  GetPlanGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetPlanGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetPlanGlobals$outboundSchema: z.ZodType<
  GetPlanGlobals$Outbound,
  z.ZodTypeDef,
  GetPlanGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPlanGlobals$ {
  /** @deprecated use `GetPlanGlobals$inboundSchema` instead. */
  export const inboundSchema = GetPlanGlobals$inboundSchema;
  /** @deprecated use `GetPlanGlobals$outboundSchema` instead. */
  export const outboundSchema = GetPlanGlobals$outboundSchema;
  /** @deprecated use `GetPlanGlobals$Outbound` instead. */
  export type Outbound = GetPlanGlobals$Outbound;
}

export function getPlanGlobalsToJSON(getPlanGlobals: GetPlanGlobals): string {
  return JSON.stringify(GetPlanGlobals$outboundSchema.parse(getPlanGlobals));
}

export function getPlanGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetPlanGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPlanGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPlanGlobals' from JSON`,
  );
}

/** @internal */
export const GetPlanRequest$inboundSchema: z.ZodType<
  GetPlanRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetPlanRequest$Outbound = {
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetPlanRequest$outboundSchema: z.ZodType<
  GetPlanRequest$Outbound,
  z.ZodTypeDef,
  GetPlanRequest
> = z.object({
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPlanRequest$ {
  /** @deprecated use `GetPlanRequest$inboundSchema` instead. */
  export const inboundSchema = GetPlanRequest$inboundSchema;
  /** @deprecated use `GetPlanRequest$outboundSchema` instead. */
  export const outboundSchema = GetPlanRequest$outboundSchema;
  /** @deprecated use `GetPlanRequest$Outbound` instead. */
  export type Outbound = GetPlanRequest$Outbound;
}

export function getPlanRequestToJSON(getPlanRequest: GetPlanRequest): string {
  return JSON.stringify(GetPlanRequest$outboundSchema.parse(getPlanRequest));
}

export function getPlanRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPlanRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPlanRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPlanRequest' from JSON`,
  );
}
