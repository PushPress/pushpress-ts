/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeactivateWebhookGlobals = {
  companyId?: string | undefined;
};

export type DeactivateWebhookRequest = {
  uuid: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/**
 * Default Response
 */
export const DeactivateWebhookResponseBody = {
  NoContent: "No Content",
} as const;
/**
 * Default Response
 */
export type DeactivateWebhookResponseBody = ClosedEnum<
  typeof DeactivateWebhookResponseBody
>;

/** @internal */
export const DeactivateWebhookGlobals$inboundSchema: z.ZodType<
  DeactivateWebhookGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type DeactivateWebhookGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const DeactivateWebhookGlobals$outboundSchema: z.ZodType<
  DeactivateWebhookGlobals$Outbound,
  z.ZodTypeDef,
  DeactivateWebhookGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateWebhookGlobals$ {
  /** @deprecated use `DeactivateWebhookGlobals$inboundSchema` instead. */
  export const inboundSchema = DeactivateWebhookGlobals$inboundSchema;
  /** @deprecated use `DeactivateWebhookGlobals$outboundSchema` instead. */
  export const outboundSchema = DeactivateWebhookGlobals$outboundSchema;
  /** @deprecated use `DeactivateWebhookGlobals$Outbound` instead. */
  export type Outbound = DeactivateWebhookGlobals$Outbound;
}

export function deactivateWebhookGlobalsToJSON(
  deactivateWebhookGlobals: DeactivateWebhookGlobals,
): string {
  return JSON.stringify(
    DeactivateWebhookGlobals$outboundSchema.parse(deactivateWebhookGlobals),
  );
}

export function deactivateWebhookGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeactivateWebhookGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeactivateWebhookGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeactivateWebhookGlobals' from JSON`,
  );
}

/** @internal */
export const DeactivateWebhookRequest$inboundSchema: z.ZodType<
  DeactivateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type DeactivateWebhookRequest$Outbound = {
  uuid: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const DeactivateWebhookRequest$outboundSchema: z.ZodType<
  DeactivateWebhookRequest$Outbound,
  z.ZodTypeDef,
  DeactivateWebhookRequest
> = z.object({
  uuid: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateWebhookRequest$ {
  /** @deprecated use `DeactivateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = DeactivateWebhookRequest$inboundSchema;
  /** @deprecated use `DeactivateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = DeactivateWebhookRequest$outboundSchema;
  /** @deprecated use `DeactivateWebhookRequest$Outbound` instead. */
  export type Outbound = DeactivateWebhookRequest$Outbound;
}

export function deactivateWebhookRequestToJSON(
  deactivateWebhookRequest: DeactivateWebhookRequest,
): string {
  return JSON.stringify(
    DeactivateWebhookRequest$outboundSchema.parse(deactivateWebhookRequest),
  );
}

export function deactivateWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeactivateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeactivateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeactivateWebhookRequest' from JSON`,
  );
}

/** @internal */
export const DeactivateWebhookResponseBody$inboundSchema: z.ZodNativeEnum<
  typeof DeactivateWebhookResponseBody
> = z.nativeEnum(DeactivateWebhookResponseBody);

/** @internal */
export const DeactivateWebhookResponseBody$outboundSchema: z.ZodNativeEnum<
  typeof DeactivateWebhookResponseBody
> = DeactivateWebhookResponseBody$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateWebhookResponseBody$ {
  /** @deprecated use `DeactivateWebhookResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeactivateWebhookResponseBody$inboundSchema;
  /** @deprecated use `DeactivateWebhookResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeactivateWebhookResponseBody$outboundSchema;
}
