/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export type ActivateWebhookGlobals = {
  companyId?: string | undefined;
};

export type ActivateWebhookRequest = {
  uuid: string;
  companyId?: string | undefined;
};

/**
 * Default Response
 */
export const ActivateWebhookResponseBody = {
  NoContent: "No Content",
} as const;
/**
 * Default Response
 */
export type ActivateWebhookResponseBody = ClosedEnum<
  typeof ActivateWebhookResponseBody
>;

/** @internal */
export const ActivateWebhookGlobals$inboundSchema: z.ZodType<
  ActivateWebhookGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ActivateWebhookGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ActivateWebhookGlobals$outboundSchema: z.ZodType<
  ActivateWebhookGlobals$Outbound,
  z.ZodTypeDef,
  ActivateWebhookGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivateWebhookGlobals$ {
  /** @deprecated use `ActivateWebhookGlobals$inboundSchema` instead. */
  export const inboundSchema = ActivateWebhookGlobals$inboundSchema;
  /** @deprecated use `ActivateWebhookGlobals$outboundSchema` instead. */
  export const outboundSchema = ActivateWebhookGlobals$outboundSchema;
  /** @deprecated use `ActivateWebhookGlobals$Outbound` instead. */
  export type Outbound = ActivateWebhookGlobals$Outbound;
}

/** @internal */
export const ActivateWebhookRequest$inboundSchema: z.ZodType<
  ActivateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ActivateWebhookRequest$Outbound = {
  uuid: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const ActivateWebhookRequest$outboundSchema: z.ZodType<
  ActivateWebhookRequest$Outbound,
  z.ZodTypeDef,
  ActivateWebhookRequest
> = z.object({
  uuid: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivateWebhookRequest$ {
  /** @deprecated use `ActivateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = ActivateWebhookRequest$inboundSchema;
  /** @deprecated use `ActivateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = ActivateWebhookRequest$outboundSchema;
  /** @deprecated use `ActivateWebhookRequest$Outbound` instead. */
  export type Outbound = ActivateWebhookRequest$Outbound;
}

/** @internal */
export const ActivateWebhookResponseBody$inboundSchema: z.ZodNativeEnum<
  typeof ActivateWebhookResponseBody
> = z.nativeEnum(ActivateWebhookResponseBody);

/** @internal */
export const ActivateWebhookResponseBody$outboundSchema: z.ZodNativeEnum<
  typeof ActivateWebhookResponseBody
> = ActivateWebhookResponseBody$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivateWebhookResponseBody$ {
  /** @deprecated use `ActivateWebhookResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivateWebhookResponseBody$inboundSchema;
  /** @deprecated use `ActivateWebhookResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivateWebhookResponseBody$outboundSchema;
}
