/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCustomersGlobals = {
  companyId?: string | undefined;
};

export const Two = {
  Admin: "admin",
  Frontdesk: "frontdesk",
  Coach: "coach",
  Member: "member",
} as const;
export type Two = ClosedEnum<typeof Two>;

export const One = {
  Admin: "admin",
  Frontdesk: "frontdesk",
  Coach: "coach",
  Member: "member",
} as const;
export type One = ClosedEnum<typeof One>;

/**
 * Filter by role such as admin, frontdesk, or member
 */
export type Role = One | Array<Two>;

export type ListCustomersRequest = {
  page?: number | undefined;
  limit?: number | undefined;
  /**
   * Filter by role such as admin, frontdesk, or member
   */
  role?: One | Array<Two> | undefined;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

export type ListCustomersData = {
  resultArray: Array<components.Customer>;
};

/**
 * Default Response
 */
export type ListCustomersResponseBody = {
  data: ListCustomersData;
};

export type ListCustomersResponse = {
  result: ListCustomersResponseBody;
};

/** @internal */
export const ListCustomersGlobals$inboundSchema: z.ZodType<
  ListCustomersGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListCustomersGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListCustomersGlobals$outboundSchema: z.ZodType<
  ListCustomersGlobals$Outbound,
  z.ZodTypeDef,
  ListCustomersGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersGlobals$ {
  /** @deprecated use `ListCustomersGlobals$inboundSchema` instead. */
  export const inboundSchema = ListCustomersGlobals$inboundSchema;
  /** @deprecated use `ListCustomersGlobals$outboundSchema` instead. */
  export const outboundSchema = ListCustomersGlobals$outboundSchema;
  /** @deprecated use `ListCustomersGlobals$Outbound` instead. */
  export type Outbound = ListCustomersGlobals$Outbound;
}

export function listCustomersGlobalsToJSON(
  listCustomersGlobals: ListCustomersGlobals,
): string {
  return JSON.stringify(
    ListCustomersGlobals$outboundSchema.parse(listCustomersGlobals),
  );
}

export function listCustomersGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersGlobals' from JSON`,
  );
}

/** @internal */
export const Two$inboundSchema: z.ZodNativeEnum<typeof Two> = z.nativeEnum(Two);

/** @internal */
export const Two$outboundSchema: z.ZodNativeEnum<typeof Two> =
  Two$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodNativeEnum<typeof One> = z.nativeEnum(One);

/** @internal */
export const One$outboundSchema: z.ZodNativeEnum<typeof One> =
  One$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
}

/** @internal */
export const Role$inboundSchema: z.ZodType<Role, z.ZodTypeDef, unknown> = z
  .union([One$inboundSchema, z.array(Two$inboundSchema)]);

/** @internal */
export type Role$Outbound = string | Array<string>;

/** @internal */
export const Role$outboundSchema: z.ZodType<Role$Outbound, z.ZodTypeDef, Role> =
  z.union([One$outboundSchema, z.array(Two$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
  /** @deprecated use `Role$Outbound` instead. */
  export type Outbound = Role$Outbound;
}

export function roleToJSON(role: Role): string {
  return JSON.stringify(Role$outboundSchema.parse(role));
}

export function roleFromJSON(
  jsonString: string,
): SafeParseResult<Role, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Role$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Role' from JSON`,
  );
}

/** @internal */
export const ListCustomersRequest$inboundSchema: z.ZodType<
  ListCustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().default(1),
  limit: z.number().default(10),
  role: z.union([One$inboundSchema, z.array(Two$inboundSchema)]).optional(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListCustomersRequest$Outbound = {
  page: number;
  limit: number;
  role?: string | Array<string> | undefined;
  "company-id"?: string | undefined;
};

/** @internal */
export const ListCustomersRequest$outboundSchema: z.ZodType<
  ListCustomersRequest$Outbound,
  z.ZodTypeDef,
  ListCustomersRequest
> = z.object({
  page: z.number().default(1),
  limit: z.number().default(10),
  role: z.union([One$outboundSchema, z.array(Two$outboundSchema)]).optional(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersRequest$ {
  /** @deprecated use `ListCustomersRequest$inboundSchema` instead. */
  export const inboundSchema = ListCustomersRequest$inboundSchema;
  /** @deprecated use `ListCustomersRequest$outboundSchema` instead. */
  export const outboundSchema = ListCustomersRequest$outboundSchema;
  /** @deprecated use `ListCustomersRequest$Outbound` instead. */
  export type Outbound = ListCustomersRequest$Outbound;
}

export function listCustomersRequestToJSON(
  listCustomersRequest: ListCustomersRequest,
): string {
  return JSON.stringify(
    ListCustomersRequest$outboundSchema.parse(listCustomersRequest),
  );
}

export function listCustomersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersRequest' from JSON`,
  );
}

/** @internal */
export const ListCustomersData$inboundSchema: z.ZodType<
  ListCustomersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultArray: z.array(components.Customer$inboundSchema),
});

/** @internal */
export type ListCustomersData$Outbound = {
  resultArray: Array<components.Customer$Outbound>;
};

/** @internal */
export const ListCustomersData$outboundSchema: z.ZodType<
  ListCustomersData$Outbound,
  z.ZodTypeDef,
  ListCustomersData
> = z.object({
  resultArray: z.array(components.Customer$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersData$ {
  /** @deprecated use `ListCustomersData$inboundSchema` instead. */
  export const inboundSchema = ListCustomersData$inboundSchema;
  /** @deprecated use `ListCustomersData$outboundSchema` instead. */
  export const outboundSchema = ListCustomersData$outboundSchema;
  /** @deprecated use `ListCustomersData$Outbound` instead. */
  export type Outbound = ListCustomersData$Outbound;
}

export function listCustomersDataToJSON(
  listCustomersData: ListCustomersData,
): string {
  return JSON.stringify(
    ListCustomersData$outboundSchema.parse(listCustomersData),
  );
}

export function listCustomersDataFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersData' from JSON`,
  );
}

/** @internal */
export const ListCustomersResponseBody$inboundSchema: z.ZodType<
  ListCustomersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ListCustomersData$inboundSchema),
});

/** @internal */
export type ListCustomersResponseBody$Outbound = {
  data: ListCustomersData$Outbound;
};

/** @internal */
export const ListCustomersResponseBody$outboundSchema: z.ZodType<
  ListCustomersResponseBody$Outbound,
  z.ZodTypeDef,
  ListCustomersResponseBody
> = z.object({
  data: z.lazy(() => ListCustomersData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersResponseBody$ {
  /** @deprecated use `ListCustomersResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListCustomersResponseBody$inboundSchema;
  /** @deprecated use `ListCustomersResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListCustomersResponseBody$outboundSchema;
  /** @deprecated use `ListCustomersResponseBody$Outbound` instead. */
  export type Outbound = ListCustomersResponseBody$Outbound;
}

export function listCustomersResponseBodyToJSON(
  listCustomersResponseBody: ListCustomersResponseBody,
): string {
  return JSON.stringify(
    ListCustomersResponseBody$outboundSchema.parse(listCustomersResponseBody),
  );
}

export function listCustomersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersResponseBody' from JSON`,
  );
}

/** @internal */
export const ListCustomersResponse$inboundSchema: z.ZodType<
  ListCustomersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListCustomersResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListCustomersResponse$Outbound = {
  Result: ListCustomersResponseBody$Outbound;
};

/** @internal */
export const ListCustomersResponse$outboundSchema: z.ZodType<
  ListCustomersResponse$Outbound,
  z.ZodTypeDef,
  ListCustomersResponse
> = z.object({
  result: z.lazy(() => ListCustomersResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersResponse$ {
  /** @deprecated use `ListCustomersResponse$inboundSchema` instead. */
  export const inboundSchema = ListCustomersResponse$inboundSchema;
  /** @deprecated use `ListCustomersResponse$outboundSchema` instead. */
  export const outboundSchema = ListCustomersResponse$outboundSchema;
  /** @deprecated use `ListCustomersResponse$Outbound` instead. */
  export type Outbound = ListCustomersResponse$Outbound;
}

export function listCustomersResponseToJSON(
  listCustomersResponse: ListCustomersResponse,
): string {
  return JSON.stringify(
    ListCustomersResponse$outboundSchema.parse(listCustomersResponse),
  );
}

export function listCustomersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersResponse' from JSON`,
  );
}
