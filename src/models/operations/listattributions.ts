/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAttributionsGlobals = {
  companyId?: string | undefined;
};

export type ListAttributionsRequest = {
  /**
   * Filter by Customer ID
   */
  customer?: string | undefined;
  /**
   * Filter by Attribution Event
   */
  attributionEvent?: string | undefined;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

export const ListAttributionsEvent = {
  Signup: "signup",
  ClientSignup: "client_signup",
} as const;
export type ListAttributionsEvent = ClosedEnum<typeof ListAttributionsEvent>;

export type ResultArray = {
  customerId: string;
  companyId: string;
  event: ListAttributionsEvent;
  /**
   * The referer URL of the customer, industry accepted typo of referrer
   */
  referer?: string | null | undefined;
  utmSource?: string | null | undefined;
  utmMedium?: string | null | undefined;
  utmCampaign?: string | null | undefined;
  utmContent?: string | null | undefined;
  utmTerm?: string | null | undefined;
};

export type Data = {
  resultArray: Array<ResultArray>;
};

/**
 * Default Response
 */
export type ListAttributionsResponseBody = {
  data: Data;
};

/** @internal */
export const ListAttributionsGlobals$inboundSchema: z.ZodType<
  ListAttributionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListAttributionsGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListAttributionsGlobals$outboundSchema: z.ZodType<
  ListAttributionsGlobals$Outbound,
  z.ZodTypeDef,
  ListAttributionsGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAttributionsGlobals$ {
  /** @deprecated use `ListAttributionsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListAttributionsGlobals$inboundSchema;
  /** @deprecated use `ListAttributionsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListAttributionsGlobals$outboundSchema;
  /** @deprecated use `ListAttributionsGlobals$Outbound` instead. */
  export type Outbound = ListAttributionsGlobals$Outbound;
}

export function listAttributionsGlobalsToJSON(
  listAttributionsGlobals: ListAttributionsGlobals,
): string {
  return JSON.stringify(
    ListAttributionsGlobals$outboundSchema.parse(listAttributionsGlobals),
  );
}

export function listAttributionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListAttributionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAttributionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAttributionsGlobals' from JSON`,
  );
}

/** @internal */
export const ListAttributionsRequest$inboundSchema: z.ZodType<
  ListAttributionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer: z.string().optional(),
  attributionEvent: z.string().optional(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListAttributionsRequest$Outbound = {
  customer?: string | undefined;
  attributionEvent?: string | undefined;
  "company-id"?: string | undefined;
};

/** @internal */
export const ListAttributionsRequest$outboundSchema: z.ZodType<
  ListAttributionsRequest$Outbound,
  z.ZodTypeDef,
  ListAttributionsRequest
> = z.object({
  customer: z.string().optional(),
  attributionEvent: z.string().optional(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAttributionsRequest$ {
  /** @deprecated use `ListAttributionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAttributionsRequest$inboundSchema;
  /** @deprecated use `ListAttributionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAttributionsRequest$outboundSchema;
  /** @deprecated use `ListAttributionsRequest$Outbound` instead. */
  export type Outbound = ListAttributionsRequest$Outbound;
}

export function listAttributionsRequestToJSON(
  listAttributionsRequest: ListAttributionsRequest,
): string {
  return JSON.stringify(
    ListAttributionsRequest$outboundSchema.parse(listAttributionsRequest),
  );
}

export function listAttributionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAttributionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAttributionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAttributionsRequest' from JSON`,
  );
}

/** @internal */
export const ListAttributionsEvent$inboundSchema: z.ZodNativeEnum<
  typeof ListAttributionsEvent
> = z.nativeEnum(ListAttributionsEvent);

/** @internal */
export const ListAttributionsEvent$outboundSchema: z.ZodNativeEnum<
  typeof ListAttributionsEvent
> = ListAttributionsEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAttributionsEvent$ {
  /** @deprecated use `ListAttributionsEvent$inboundSchema` instead. */
  export const inboundSchema = ListAttributionsEvent$inboundSchema;
  /** @deprecated use `ListAttributionsEvent$outboundSchema` instead. */
  export const outboundSchema = ListAttributionsEvent$outboundSchema;
}

/** @internal */
export const ResultArray$inboundSchema: z.ZodType<
  ResultArray,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  companyId: z.string(),
  event: ListAttributionsEvent$inboundSchema,
  referer: z.nullable(z.string()).optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResultArray$Outbound = {
  customerId: string;
  companyId: string;
  event: string;
  referer?: string | null | undefined;
  utmSource?: string | null | undefined;
  utmMedium?: string | null | undefined;
  utmCampaign?: string | null | undefined;
  utmContent?: string | null | undefined;
  utmTerm?: string | null | undefined;
};

/** @internal */
export const ResultArray$outboundSchema: z.ZodType<
  ResultArray$Outbound,
  z.ZodTypeDef,
  ResultArray
> = z.object({
  customerId: z.string(),
  companyId: z.string(),
  event: ListAttributionsEvent$outboundSchema,
  referer: z.nullable(z.string()).optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultArray$ {
  /** @deprecated use `ResultArray$inboundSchema` instead. */
  export const inboundSchema = ResultArray$inboundSchema;
  /** @deprecated use `ResultArray$outboundSchema` instead. */
  export const outboundSchema = ResultArray$outboundSchema;
  /** @deprecated use `ResultArray$Outbound` instead. */
  export type Outbound = ResultArray$Outbound;
}

export function resultArrayToJSON(resultArray: ResultArray): string {
  return JSON.stringify(ResultArray$outboundSchema.parse(resultArray));
}

export function resultArrayFromJSON(
  jsonString: string,
): SafeParseResult<ResultArray, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultArray$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultArray' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    resultArray: z.array(z.lazy(() => ResultArray$inboundSchema)),
  });

/** @internal */
export type Data$Outbound = {
  resultArray: Array<ResultArray$Outbound>;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    resultArray: z.array(z.lazy(() => ResultArray$outboundSchema)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const ListAttributionsResponseBody$inboundSchema: z.ZodType<
  ListAttributionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type ListAttributionsResponseBody$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const ListAttributionsResponseBody$outboundSchema: z.ZodType<
  ListAttributionsResponseBody$Outbound,
  z.ZodTypeDef,
  ListAttributionsResponseBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAttributionsResponseBody$ {
  /** @deprecated use `ListAttributionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListAttributionsResponseBody$inboundSchema;
  /** @deprecated use `ListAttributionsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListAttributionsResponseBody$outboundSchema;
  /** @deprecated use `ListAttributionsResponseBody$Outbound` instead. */
  export type Outbound = ListAttributionsResponseBody$Outbound;
}

export function listAttributionsResponseBodyToJSON(
  listAttributionsResponseBody: ListAttributionsResponseBody,
): string {
  return JSON.stringify(
    ListAttributionsResponseBody$outboundSchema.parse(
      listAttributionsResponseBody,
    ),
  );
}

export function listAttributionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAttributionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAttributionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAttributionsResponseBody' from JSON`,
  );
}
