/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListEnrollmentsGlobals = {
  companyId?: string | undefined;
};

export const Status = {
  Active: "active",
  Alert: "alert",
  Canceled: "canceled",
  Completed: "completed",
  Paused: "paused",
  Pendactivation: "pendactivation",
  Pendcancel: "pendcancel",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type ListEnrollmentsRequest = {
  /**
   * page number
   */
  page?: number | undefined;
  /**
   * limit
   */
  limit?: number | undefined;
  customerId?: string | undefined;
  status?: Status | undefined;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

export type ListEnrollmentsData = {
  resultArray: Array<components.Enrollment>;
};

/**
 * Default Response
 */
export type ListEnrollmentsResponseBody = {
  data: ListEnrollmentsData;
};

export type ListEnrollmentsResponse = {
  result: ListEnrollmentsResponseBody;
};

/** @internal */
export const ListEnrollmentsGlobals$inboundSchema: z.ZodType<
  ListEnrollmentsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListEnrollmentsGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListEnrollmentsGlobals$outboundSchema: z.ZodType<
  ListEnrollmentsGlobals$Outbound,
  z.ZodTypeDef,
  ListEnrollmentsGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnrollmentsGlobals$ {
  /** @deprecated use `ListEnrollmentsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListEnrollmentsGlobals$inboundSchema;
  /** @deprecated use `ListEnrollmentsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListEnrollmentsGlobals$outboundSchema;
  /** @deprecated use `ListEnrollmentsGlobals$Outbound` instead. */
  export type Outbound = ListEnrollmentsGlobals$Outbound;
}

export function listEnrollmentsGlobalsToJSON(
  listEnrollmentsGlobals: ListEnrollmentsGlobals,
): string {
  return JSON.stringify(
    ListEnrollmentsGlobals$outboundSchema.parse(listEnrollmentsGlobals),
  );
}

export function listEnrollmentsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListEnrollmentsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEnrollmentsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEnrollmentsGlobals' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const ListEnrollmentsRequest$inboundSchema: z.ZodType<
  ListEnrollmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  customerId: z.string().optional(),
  status: Status$inboundSchema.optional(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListEnrollmentsRequest$Outbound = {
  page: number;
  limit: number;
  customerId?: string | undefined;
  status?: string | undefined;
  "company-id"?: string | undefined;
};

/** @internal */
export const ListEnrollmentsRequest$outboundSchema: z.ZodType<
  ListEnrollmentsRequest$Outbound,
  z.ZodTypeDef,
  ListEnrollmentsRequest
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  customerId: z.string().optional(),
  status: Status$outboundSchema.optional(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnrollmentsRequest$ {
  /** @deprecated use `ListEnrollmentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListEnrollmentsRequest$inboundSchema;
  /** @deprecated use `ListEnrollmentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListEnrollmentsRequest$outboundSchema;
  /** @deprecated use `ListEnrollmentsRequest$Outbound` instead. */
  export type Outbound = ListEnrollmentsRequest$Outbound;
}

export function listEnrollmentsRequestToJSON(
  listEnrollmentsRequest: ListEnrollmentsRequest,
): string {
  return JSON.stringify(
    ListEnrollmentsRequest$outboundSchema.parse(listEnrollmentsRequest),
  );
}

export function listEnrollmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEnrollmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEnrollmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEnrollmentsRequest' from JSON`,
  );
}

/** @internal */
export const ListEnrollmentsData$inboundSchema: z.ZodType<
  ListEnrollmentsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultArray: z.array(components.Enrollment$inboundSchema),
});

/** @internal */
export type ListEnrollmentsData$Outbound = {
  resultArray: Array<components.Enrollment$Outbound>;
};

/** @internal */
export const ListEnrollmentsData$outboundSchema: z.ZodType<
  ListEnrollmentsData$Outbound,
  z.ZodTypeDef,
  ListEnrollmentsData
> = z.object({
  resultArray: z.array(components.Enrollment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnrollmentsData$ {
  /** @deprecated use `ListEnrollmentsData$inboundSchema` instead. */
  export const inboundSchema = ListEnrollmentsData$inboundSchema;
  /** @deprecated use `ListEnrollmentsData$outboundSchema` instead. */
  export const outboundSchema = ListEnrollmentsData$outboundSchema;
  /** @deprecated use `ListEnrollmentsData$Outbound` instead. */
  export type Outbound = ListEnrollmentsData$Outbound;
}

export function listEnrollmentsDataToJSON(
  listEnrollmentsData: ListEnrollmentsData,
): string {
  return JSON.stringify(
    ListEnrollmentsData$outboundSchema.parse(listEnrollmentsData),
  );
}

export function listEnrollmentsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListEnrollmentsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEnrollmentsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEnrollmentsData' from JSON`,
  );
}

/** @internal */
export const ListEnrollmentsResponseBody$inboundSchema: z.ZodType<
  ListEnrollmentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ListEnrollmentsData$inboundSchema),
});

/** @internal */
export type ListEnrollmentsResponseBody$Outbound = {
  data: ListEnrollmentsData$Outbound;
};

/** @internal */
export const ListEnrollmentsResponseBody$outboundSchema: z.ZodType<
  ListEnrollmentsResponseBody$Outbound,
  z.ZodTypeDef,
  ListEnrollmentsResponseBody
> = z.object({
  data: z.lazy(() => ListEnrollmentsData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnrollmentsResponseBody$ {
  /** @deprecated use `ListEnrollmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListEnrollmentsResponseBody$inboundSchema;
  /** @deprecated use `ListEnrollmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListEnrollmentsResponseBody$outboundSchema;
  /** @deprecated use `ListEnrollmentsResponseBody$Outbound` instead. */
  export type Outbound = ListEnrollmentsResponseBody$Outbound;
}

export function listEnrollmentsResponseBodyToJSON(
  listEnrollmentsResponseBody: ListEnrollmentsResponseBody,
): string {
  return JSON.stringify(
    ListEnrollmentsResponseBody$outboundSchema.parse(
      listEnrollmentsResponseBody,
    ),
  );
}

export function listEnrollmentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListEnrollmentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEnrollmentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEnrollmentsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListEnrollmentsResponse$inboundSchema: z.ZodType<
  ListEnrollmentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListEnrollmentsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListEnrollmentsResponse$Outbound = {
  Result: ListEnrollmentsResponseBody$Outbound;
};

/** @internal */
export const ListEnrollmentsResponse$outboundSchema: z.ZodType<
  ListEnrollmentsResponse$Outbound,
  z.ZodTypeDef,
  ListEnrollmentsResponse
> = z.object({
  result: z.lazy(() => ListEnrollmentsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnrollmentsResponse$ {
  /** @deprecated use `ListEnrollmentsResponse$inboundSchema` instead. */
  export const inboundSchema = ListEnrollmentsResponse$inboundSchema;
  /** @deprecated use `ListEnrollmentsResponse$outboundSchema` instead. */
  export const outboundSchema = ListEnrollmentsResponse$outboundSchema;
  /** @deprecated use `ListEnrollmentsResponse$Outbound` instead. */
  export type Outbound = ListEnrollmentsResponse$Outbound;
}

export function listEnrollmentsResponseToJSON(
  listEnrollmentsResponse: ListEnrollmentsResponse,
): string {
  return JSON.stringify(
    ListEnrollmentsResponse$outboundSchema.parse(listEnrollmentsResponse),
  );
}

export function listEnrollmentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListEnrollmentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEnrollmentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEnrollmentsResponse' from JSON`,
  );
}
