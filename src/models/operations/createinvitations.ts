/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateInvitationsGlobals = {
  companyId?: string | undefined;
};

export type CreateInvitationsRequestBody = {
  eventId: string;
  customerIds: Array<string>;
};

export type CreateInvitationsRequest = {
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
  requestBody: CreateInvitationsRequestBody;
};

export type ResponseBody = {
  id: string;
};

/** @internal */
export const CreateInvitationsGlobals$inboundSchema: z.ZodType<
  CreateInvitationsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type CreateInvitationsGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const CreateInvitationsGlobals$outboundSchema: z.ZodType<
  CreateInvitationsGlobals$Outbound,
  z.ZodTypeDef,
  CreateInvitationsGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvitationsGlobals$ {
  /** @deprecated use `CreateInvitationsGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateInvitationsGlobals$inboundSchema;
  /** @deprecated use `CreateInvitationsGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateInvitationsGlobals$outboundSchema;
  /** @deprecated use `CreateInvitationsGlobals$Outbound` instead. */
  export type Outbound = CreateInvitationsGlobals$Outbound;
}

export function createInvitationsGlobalsToJSON(
  createInvitationsGlobals: CreateInvitationsGlobals,
): string {
  return JSON.stringify(
    CreateInvitationsGlobals$outboundSchema.parse(createInvitationsGlobals),
  );
}

export function createInvitationsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateInvitationsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInvitationsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInvitationsGlobals' from JSON`,
  );
}

/** @internal */
export const CreateInvitationsRequestBody$inboundSchema: z.ZodType<
  CreateInvitationsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventId: z.string(),
  customerIds: z.array(z.string()),
});

/** @internal */
export type CreateInvitationsRequestBody$Outbound = {
  eventId: string;
  customerIds: Array<string>;
};

/** @internal */
export const CreateInvitationsRequestBody$outboundSchema: z.ZodType<
  CreateInvitationsRequestBody$Outbound,
  z.ZodTypeDef,
  CreateInvitationsRequestBody
> = z.object({
  eventId: z.string(),
  customerIds: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvitationsRequestBody$ {
  /** @deprecated use `CreateInvitationsRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateInvitationsRequestBody$inboundSchema;
  /** @deprecated use `CreateInvitationsRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateInvitationsRequestBody$outboundSchema;
  /** @deprecated use `CreateInvitationsRequestBody$Outbound` instead. */
  export type Outbound = CreateInvitationsRequestBody$Outbound;
}

export function createInvitationsRequestBodyToJSON(
  createInvitationsRequestBody: CreateInvitationsRequestBody,
): string {
  return JSON.stringify(
    CreateInvitationsRequestBody$outboundSchema.parse(
      createInvitationsRequestBody,
    ),
  );
}

export function createInvitationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateInvitationsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInvitationsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInvitationsRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateInvitationsRequest$inboundSchema: z.ZodType<
  CreateInvitationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
  RequestBody: z.lazy(() => CreateInvitationsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateInvitationsRequest$Outbound = {
  "company-id"?: string | undefined;
  RequestBody: CreateInvitationsRequestBody$Outbound;
};

/** @internal */
export const CreateInvitationsRequest$outboundSchema: z.ZodType<
  CreateInvitationsRequest$Outbound,
  z.ZodTypeDef,
  CreateInvitationsRequest
> = z.object({
  companyId: z.string().optional(),
  requestBody: z.lazy(() => CreateInvitationsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvitationsRequest$ {
  /** @deprecated use `CreateInvitationsRequest$inboundSchema` instead. */
  export const inboundSchema = CreateInvitationsRequest$inboundSchema;
  /** @deprecated use `CreateInvitationsRequest$outboundSchema` instead. */
  export const outboundSchema = CreateInvitationsRequest$outboundSchema;
  /** @deprecated use `CreateInvitationsRequest$Outbound` instead. */
  export type Outbound = CreateInvitationsRequest$Outbound;
}

export function createInvitationsRequestToJSON(
  createInvitationsRequest: CreateInvitationsRequest,
): string {
  return JSON.stringify(
    CreateInvitationsRequest$outboundSchema.parse(createInvitationsRequest),
  );
}

export function createInvitationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateInvitationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInvitationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInvitationsRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ResponseBody$Outbound = {
  id: string;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}
