/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOpenCheckinGlobals = {
  companyId?: string | undefined;
};

export type GetOpenCheckinRequest = {
  uuid: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/** @internal */
export const GetOpenCheckinGlobals$inboundSchema: z.ZodType<
  GetOpenCheckinGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetOpenCheckinGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetOpenCheckinGlobals$outboundSchema: z.ZodType<
  GetOpenCheckinGlobals$Outbound,
  z.ZodTypeDef,
  GetOpenCheckinGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenCheckinGlobals$ {
  /** @deprecated use `GetOpenCheckinGlobals$inboundSchema` instead. */
  export const inboundSchema = GetOpenCheckinGlobals$inboundSchema;
  /** @deprecated use `GetOpenCheckinGlobals$outboundSchema` instead. */
  export const outboundSchema = GetOpenCheckinGlobals$outboundSchema;
  /** @deprecated use `GetOpenCheckinGlobals$Outbound` instead. */
  export type Outbound = GetOpenCheckinGlobals$Outbound;
}

export function getOpenCheckinGlobalsToJSON(
  getOpenCheckinGlobals: GetOpenCheckinGlobals,
): string {
  return JSON.stringify(
    GetOpenCheckinGlobals$outboundSchema.parse(getOpenCheckinGlobals),
  );
}

export function getOpenCheckinGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenCheckinGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenCheckinGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenCheckinGlobals' from JSON`,
  );
}

/** @internal */
export const GetOpenCheckinRequest$inboundSchema: z.ZodType<
  GetOpenCheckinRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetOpenCheckinRequest$Outbound = {
  uuid: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetOpenCheckinRequest$outboundSchema: z.ZodType<
  GetOpenCheckinRequest$Outbound,
  z.ZodTypeDef,
  GetOpenCheckinRequest
> = z.object({
  uuid: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpenCheckinRequest$ {
  /** @deprecated use `GetOpenCheckinRequest$inboundSchema` instead. */
  export const inboundSchema = GetOpenCheckinRequest$inboundSchema;
  /** @deprecated use `GetOpenCheckinRequest$outboundSchema` instead. */
  export const outboundSchema = GetOpenCheckinRequest$outboundSchema;
  /** @deprecated use `GetOpenCheckinRequest$Outbound` instead. */
  export type Outbound = GetOpenCheckinRequest$Outbound;
}

export function getOpenCheckinRequestToJSON(
  getOpenCheckinRequest: GetOpenCheckinRequest,
): string {
  return JSON.stringify(
    GetOpenCheckinRequest$outboundSchema.parse(getOpenCheckinRequest),
  );
}

export function getOpenCheckinRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOpenCheckinRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpenCheckinRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpenCheckinRequest' from JSON`,
  );
}
