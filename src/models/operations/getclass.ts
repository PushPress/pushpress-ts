/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetClassGlobals = {
  companyId?: string | undefined;
};

export const Expand = {
  Location: "location",
  Reservations: "reservations",
} as const;
export type Expand = ClosedEnum<typeof Expand>;

export type GetClassRequest = {
  expand?: Array<Expand> | undefined;
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/** @internal */
export const GetClassGlobals$inboundSchema: z.ZodType<
  GetClassGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetClassGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetClassGlobals$outboundSchema: z.ZodType<
  GetClassGlobals$Outbound,
  z.ZodTypeDef,
  GetClassGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClassGlobals$ {
  /** @deprecated use `GetClassGlobals$inboundSchema` instead. */
  export const inboundSchema = GetClassGlobals$inboundSchema;
  /** @deprecated use `GetClassGlobals$outboundSchema` instead. */
  export const outboundSchema = GetClassGlobals$outboundSchema;
  /** @deprecated use `GetClassGlobals$Outbound` instead. */
  export type Outbound = GetClassGlobals$Outbound;
}

export function getClassGlobalsToJSON(
  getClassGlobals: GetClassGlobals,
): string {
  return JSON.stringify(GetClassGlobals$outboundSchema.parse(getClassGlobals));
}

export function getClassGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetClassGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClassGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClassGlobals' from JSON`,
  );
}

/** @internal */
export const Expand$inboundSchema: z.ZodNativeEnum<typeof Expand> = z
  .nativeEnum(Expand);

/** @internal */
export const Expand$outboundSchema: z.ZodNativeEnum<typeof Expand> =
  Expand$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Expand$ {
  /** @deprecated use `Expand$inboundSchema` instead. */
  export const inboundSchema = Expand$inboundSchema;
  /** @deprecated use `Expand$outboundSchema` instead. */
  export const outboundSchema = Expand$outboundSchema;
}

/** @internal */
export const GetClassRequest$inboundSchema: z.ZodType<
  GetClassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.array(Expand$inboundSchema).optional(),
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetClassRequest$Outbound = {
  expand?: Array<string> | undefined;
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetClassRequest$outboundSchema: z.ZodType<
  GetClassRequest$Outbound,
  z.ZodTypeDef,
  GetClassRequest
> = z.object({
  expand: z.array(Expand$outboundSchema).optional(),
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClassRequest$ {
  /** @deprecated use `GetClassRequest$inboundSchema` instead. */
  export const inboundSchema = GetClassRequest$inboundSchema;
  /** @deprecated use `GetClassRequest$outboundSchema` instead. */
  export const outboundSchema = GetClassRequest$outboundSchema;
  /** @deprecated use `GetClassRequest$Outbound` instead. */
  export type Outbound = GetClassRequest$Outbound;
}

export function getClassRequestToJSON(
  getClassRequest: GetClassRequest,
): string {
  return JSON.stringify(GetClassRequest$outboundSchema.parse(getClassRequest));
}

export function getClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetClassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClassRequest' from JSON`,
  );
}
