/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEventGlobals = {
  companyId?: string | undefined;
};

export const QueryParam2 = {
  Location: "location",
  Reservations: "reservations",
} as const;
export type QueryParam2 = ClosedEnum<typeof QueryParam2>;

export const QueryParam1 = {
  Location: "location",
  Reservations: "reservations",
} as const;
export type QueryParam1 = ClosedEnum<typeof QueryParam1>;

export type QueryParamExpand = QueryParam1 | Array<QueryParam2>;

export type GetEventRequest = {
  expand?: QueryParam1 | Array<QueryParam2> | undefined;
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/** @internal */
export const GetEventGlobals$inboundSchema: z.ZodType<
  GetEventGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetEventGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetEventGlobals$outboundSchema: z.ZodType<
  GetEventGlobals$Outbound,
  z.ZodTypeDef,
  GetEventGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventGlobals$ {
  /** @deprecated use `GetEventGlobals$inboundSchema` instead. */
  export const inboundSchema = GetEventGlobals$inboundSchema;
  /** @deprecated use `GetEventGlobals$outboundSchema` instead. */
  export const outboundSchema = GetEventGlobals$outboundSchema;
  /** @deprecated use `GetEventGlobals$Outbound` instead. */
  export type Outbound = GetEventGlobals$Outbound;
}

export function getEventGlobalsToJSON(
  getEventGlobals: GetEventGlobals,
): string {
  return JSON.stringify(GetEventGlobals$outboundSchema.parse(getEventGlobals));
}

export function getEventGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetEventGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventGlobals' from JSON`,
  );
}

/** @internal */
export const QueryParam2$inboundSchema: z.ZodNativeEnum<typeof QueryParam2> = z
  .nativeEnum(QueryParam2);

/** @internal */
export const QueryParam2$outboundSchema: z.ZodNativeEnum<typeof QueryParam2> =
  QueryParam2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParam2$ {
  /** @deprecated use `QueryParam2$inboundSchema` instead. */
  export const inboundSchema = QueryParam2$inboundSchema;
  /** @deprecated use `QueryParam2$outboundSchema` instead. */
  export const outboundSchema = QueryParam2$outboundSchema;
}

/** @internal */
export const QueryParam1$inboundSchema: z.ZodNativeEnum<typeof QueryParam1> = z
  .nativeEnum(QueryParam1);

/** @internal */
export const QueryParam1$outboundSchema: z.ZodNativeEnum<typeof QueryParam1> =
  QueryParam1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParam1$ {
  /** @deprecated use `QueryParam1$inboundSchema` instead. */
  export const inboundSchema = QueryParam1$inboundSchema;
  /** @deprecated use `QueryParam1$outboundSchema` instead. */
  export const outboundSchema = QueryParam1$outboundSchema;
}

/** @internal */
export const QueryParamExpand$inboundSchema: z.ZodType<
  QueryParamExpand,
  z.ZodTypeDef,
  unknown
> = z.union([QueryParam1$inboundSchema, z.array(QueryParam2$inboundSchema)]);

/** @internal */
export type QueryParamExpand$Outbound = string | Array<string>;

/** @internal */
export const QueryParamExpand$outboundSchema: z.ZodType<
  QueryParamExpand$Outbound,
  z.ZodTypeDef,
  QueryParamExpand
> = z.union([QueryParam1$outboundSchema, z.array(QueryParam2$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamExpand$ {
  /** @deprecated use `QueryParamExpand$inboundSchema` instead. */
  export const inboundSchema = QueryParamExpand$inboundSchema;
  /** @deprecated use `QueryParamExpand$outboundSchema` instead. */
  export const outboundSchema = QueryParamExpand$outboundSchema;
  /** @deprecated use `QueryParamExpand$Outbound` instead. */
  export type Outbound = QueryParamExpand$Outbound;
}

export function queryParamExpandToJSON(
  queryParamExpand: QueryParamExpand,
): string {
  return JSON.stringify(
    QueryParamExpand$outboundSchema.parse(queryParamExpand),
  );
}

export function queryParamExpandFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamExpand, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamExpand$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamExpand' from JSON`,
  );
}

/** @internal */
export const GetEventRequest$inboundSchema: z.ZodType<
  GetEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.union([
    QueryParam1$inboundSchema,
    z.array(QueryParam2$inboundSchema),
  ]).optional(),
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetEventRequest$Outbound = {
  expand?: string | Array<string> | undefined;
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetEventRequest$outboundSchema: z.ZodType<
  GetEventRequest$Outbound,
  z.ZodTypeDef,
  GetEventRequest
> = z.object({
  expand: z.union([
    QueryParam1$outboundSchema,
    z.array(QueryParam2$outboundSchema),
  ]).optional(),
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventRequest$ {
  /** @deprecated use `GetEventRequest$inboundSchema` instead. */
  export const inboundSchema = GetEventRequest$inboundSchema;
  /** @deprecated use `GetEventRequest$outboundSchema` instead. */
  export const outboundSchema = GetEventRequest$outboundSchema;
  /** @deprecated use `GetEventRequest$Outbound` instead. */
  export type Outbound = GetEventRequest$Outbound;
}

export function getEventRequestToJSON(
  getEventRequest: GetEventRequest,
): string {
  return JSON.stringify(GetEventRequest$outboundSchema.parse(getEventRequest));
}

export function getEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventRequest' from JSON`,
  );
}
