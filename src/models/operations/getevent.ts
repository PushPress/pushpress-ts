/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEventGlobals = {
  companyId?: string | undefined;
};

export const QueryParamExpand = {
  Location: "location",
  Reservations: "reservations",
} as const;
export type QueryParamExpand = ClosedEnum<typeof QueryParamExpand>;

export type GetEventRequest = {
  expand?: Array<QueryParamExpand> | undefined;
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/** @internal */
export const GetEventGlobals$inboundSchema: z.ZodType<
  GetEventGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetEventGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetEventGlobals$outboundSchema: z.ZodType<
  GetEventGlobals$Outbound,
  z.ZodTypeDef,
  GetEventGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventGlobals$ {
  /** @deprecated use `GetEventGlobals$inboundSchema` instead. */
  export const inboundSchema = GetEventGlobals$inboundSchema;
  /** @deprecated use `GetEventGlobals$outboundSchema` instead. */
  export const outboundSchema = GetEventGlobals$outboundSchema;
  /** @deprecated use `GetEventGlobals$Outbound` instead. */
  export type Outbound = GetEventGlobals$Outbound;
}

export function getEventGlobalsToJSON(
  getEventGlobals: GetEventGlobals,
): string {
  return JSON.stringify(GetEventGlobals$outboundSchema.parse(getEventGlobals));
}

export function getEventGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetEventGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventGlobals' from JSON`,
  );
}

/** @internal */
export const QueryParamExpand$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamExpand
> = z.nativeEnum(QueryParamExpand);

/** @internal */
export const QueryParamExpand$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamExpand
> = QueryParamExpand$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamExpand$ {
  /** @deprecated use `QueryParamExpand$inboundSchema` instead. */
  export const inboundSchema = QueryParamExpand$inboundSchema;
  /** @deprecated use `QueryParamExpand$outboundSchema` instead. */
  export const outboundSchema = QueryParamExpand$outboundSchema;
}

/** @internal */
export const GetEventRequest$inboundSchema: z.ZodType<
  GetEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.array(QueryParamExpand$inboundSchema).optional(),
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetEventRequest$Outbound = {
  expand?: Array<string> | undefined;
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetEventRequest$outboundSchema: z.ZodType<
  GetEventRequest$Outbound,
  z.ZodTypeDef,
  GetEventRequest
> = z.object({
  expand: z.array(QueryParamExpand$outboundSchema).optional(),
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventRequest$ {
  /** @deprecated use `GetEventRequest$inboundSchema` instead. */
  export const inboundSchema = GetEventRequest$inboundSchema;
  /** @deprecated use `GetEventRequest$outboundSchema` instead. */
  export const outboundSchema = GetEventRequest$outboundSchema;
  /** @deprecated use `GetEventRequest$Outbound` instead. */
  export type Outbound = GetEventRequest$Outbound;
}

export function getEventRequestToJSON(
  getEventRequest: GetEventRequest,
): string {
  return JSON.stringify(GetEventRequest$outboundSchema.parse(getEventRequest));
}

export function getEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventRequest' from JSON`,
  );
}
