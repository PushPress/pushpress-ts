/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type SendPushGlobals = {
  companyId?: string | undefined;
};

export type SendPushRequestBody = {
  /**
   * customer ids to notify
   */
  customers: Array<string>;
  /**
   * message to send
   */
  message: string;
  /**
   * type of message
   */
  type?: string | undefined;
  /**
   * Optional metadata to attach to the message
   */
  data?: any | undefined;
};

export type SendPushRequest = {
  companyId?: string | undefined;
  requestBody: SendPushRequestBody;
};

export type SendPushInvalidAliases = {
  externalId: Array<string>;
};

export type SendPushErrors = {
  invalidAliases: SendPushInvalidAliases;
};

/**
 * Default Response
 */
export type SendPushResponseBody = {
  id?: string | undefined;
  externalId?: string | null | undefined;
  errors?: SendPushErrors | undefined;
};

/** @internal */
export const SendPushGlobals$inboundSchema: z.ZodType<
  SendPushGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type SendPushGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const SendPushGlobals$outboundSchema: z.ZodType<
  SendPushGlobals$Outbound,
  z.ZodTypeDef,
  SendPushGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendPushGlobals$ {
  /** @deprecated use `SendPushGlobals$inboundSchema` instead. */
  export const inboundSchema = SendPushGlobals$inboundSchema;
  /** @deprecated use `SendPushGlobals$outboundSchema` instead. */
  export const outboundSchema = SendPushGlobals$outboundSchema;
  /** @deprecated use `SendPushGlobals$Outbound` instead. */
  export type Outbound = SendPushGlobals$Outbound;
}

/** @internal */
export const SendPushRequestBody$inboundSchema: z.ZodType<
  SendPushRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  customers: z.array(z.string()),
  message: z.string(),
  type: z.string().optional(),
  data: z.any().optional(),
});

/** @internal */
export type SendPushRequestBody$Outbound = {
  customers: Array<string>;
  message: string;
  type?: string | undefined;
  data?: any | undefined;
};

/** @internal */
export const SendPushRequestBody$outboundSchema: z.ZodType<
  SendPushRequestBody$Outbound,
  z.ZodTypeDef,
  SendPushRequestBody
> = z.object({
  customers: z.array(z.string()),
  message: z.string(),
  type: z.string().optional(),
  data: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendPushRequestBody$ {
  /** @deprecated use `SendPushRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendPushRequestBody$inboundSchema;
  /** @deprecated use `SendPushRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendPushRequestBody$outboundSchema;
  /** @deprecated use `SendPushRequestBody$Outbound` instead. */
  export type Outbound = SendPushRequestBody$Outbound;
}

/** @internal */
export const SendPushRequest$inboundSchema: z.ZodType<
  SendPushRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
  RequestBody: z.lazy(() => SendPushRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SendPushRequest$Outbound = {
  "company-id"?: string | undefined;
  RequestBody: SendPushRequestBody$Outbound;
};

/** @internal */
export const SendPushRequest$outboundSchema: z.ZodType<
  SendPushRequest$Outbound,
  z.ZodTypeDef,
  SendPushRequest
> = z.object({
  companyId: z.string().optional(),
  requestBody: z.lazy(() => SendPushRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendPushRequest$ {
  /** @deprecated use `SendPushRequest$inboundSchema` instead. */
  export const inboundSchema = SendPushRequest$inboundSchema;
  /** @deprecated use `SendPushRequest$outboundSchema` instead. */
  export const outboundSchema = SendPushRequest$outboundSchema;
  /** @deprecated use `SendPushRequest$Outbound` instead. */
  export type Outbound = SendPushRequest$Outbound;
}

/** @internal */
export const SendPushInvalidAliases$inboundSchema: z.ZodType<
  SendPushInvalidAliases,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type SendPushInvalidAliases$Outbound = {
  external_id: Array<string>;
};

/** @internal */
export const SendPushInvalidAliases$outboundSchema: z.ZodType<
  SendPushInvalidAliases$Outbound,
  z.ZodTypeDef,
  SendPushInvalidAliases
> = z.object({
  externalId: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendPushInvalidAliases$ {
  /** @deprecated use `SendPushInvalidAliases$inboundSchema` instead. */
  export const inboundSchema = SendPushInvalidAliases$inboundSchema;
  /** @deprecated use `SendPushInvalidAliases$outboundSchema` instead. */
  export const outboundSchema = SendPushInvalidAliases$outboundSchema;
  /** @deprecated use `SendPushInvalidAliases$Outbound` instead. */
  export type Outbound = SendPushInvalidAliases$Outbound;
}

/** @internal */
export const SendPushErrors$inboundSchema: z.ZodType<
  SendPushErrors,
  z.ZodTypeDef,
  unknown
> = z.object({
  invalid_aliases: z.lazy(() => SendPushInvalidAliases$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "invalid_aliases": "invalidAliases",
  });
});

/** @internal */
export type SendPushErrors$Outbound = {
  invalid_aliases: SendPushInvalidAliases$Outbound;
};

/** @internal */
export const SendPushErrors$outboundSchema: z.ZodType<
  SendPushErrors$Outbound,
  z.ZodTypeDef,
  SendPushErrors
> = z.object({
  invalidAliases: z.lazy(() => SendPushInvalidAliases$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    invalidAliases: "invalid_aliases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendPushErrors$ {
  /** @deprecated use `SendPushErrors$inboundSchema` instead. */
  export const inboundSchema = SendPushErrors$inboundSchema;
  /** @deprecated use `SendPushErrors$outboundSchema` instead. */
  export const outboundSchema = SendPushErrors$outboundSchema;
  /** @deprecated use `SendPushErrors$Outbound` instead. */
  export type Outbound = SendPushErrors$Outbound;
}

/** @internal */
export const SendPushResponseBody$inboundSchema: z.ZodType<
  SendPushResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  external_id: z.nullable(z.string()).optional(),
  errors: z.lazy(() => SendPushErrors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type SendPushResponseBody$Outbound = {
  id?: string | undefined;
  external_id?: string | null | undefined;
  errors?: SendPushErrors$Outbound | undefined;
};

/** @internal */
export const SendPushResponseBody$outboundSchema: z.ZodType<
  SendPushResponseBody$Outbound,
  z.ZodTypeDef,
  SendPushResponseBody
> = z.object({
  id: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  errors: z.lazy(() => SendPushErrors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendPushResponseBody$ {
  /** @deprecated use `SendPushResponseBody$inboundSchema` instead. */
  export const inboundSchema = SendPushResponseBody$inboundSchema;
  /** @deprecated use `SendPushResponseBody$outboundSchema` instead. */
  export const outboundSchema = SendPushResponseBody$outboundSchema;
  /** @deprecated use `SendPushResponseBody$Outbound` instead. */
  export type Outbound = SendPushResponseBody$Outbound;
}
