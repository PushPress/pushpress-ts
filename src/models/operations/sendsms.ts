/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type SendSmsGlobals = {
  companyId?: string | undefined;
};

export type SendSmsRequestBody = {
  /**
   * Message body, maximum 160 characters
   */
  message: string;
  /**
   * Phone number, e.g. +18005555555 or 555-555-5555
   */
  to: string;
};

export type SendSmsRequest = {
  companyId?: string | undefined;
  requestBody: SendSmsRequestBody;
};

/** @internal */
export const SendSmsGlobals$inboundSchema: z.ZodType<
  SendSmsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type SendSmsGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const SendSmsGlobals$outboundSchema: z.ZodType<
  SendSmsGlobals$Outbound,
  z.ZodTypeDef,
  SendSmsGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendSmsGlobals$ {
  /** @deprecated use `SendSmsGlobals$inboundSchema` instead. */
  export const inboundSchema = SendSmsGlobals$inboundSchema;
  /** @deprecated use `SendSmsGlobals$outboundSchema` instead. */
  export const outboundSchema = SendSmsGlobals$outboundSchema;
  /** @deprecated use `SendSmsGlobals$Outbound` instead. */
  export type Outbound = SendSmsGlobals$Outbound;
}

/** @internal */
export const SendSmsRequestBody$inboundSchema: z.ZodType<
  SendSmsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  to: z.string(),
});

/** @internal */
export type SendSmsRequestBody$Outbound = {
  message: string;
  to: string;
};

/** @internal */
export const SendSmsRequestBody$outboundSchema: z.ZodType<
  SendSmsRequestBody$Outbound,
  z.ZodTypeDef,
  SendSmsRequestBody
> = z.object({
  message: z.string(),
  to: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendSmsRequestBody$ {
  /** @deprecated use `SendSmsRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendSmsRequestBody$inboundSchema;
  /** @deprecated use `SendSmsRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendSmsRequestBody$outboundSchema;
  /** @deprecated use `SendSmsRequestBody$Outbound` instead. */
  export type Outbound = SendSmsRequestBody$Outbound;
}

/** @internal */
export const SendSmsRequest$inboundSchema: z.ZodType<
  SendSmsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
  RequestBody: z.lazy(() => SendSmsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SendSmsRequest$Outbound = {
  "company-id"?: string | undefined;
  RequestBody: SendSmsRequestBody$Outbound;
};

/** @internal */
export const SendSmsRequest$outboundSchema: z.ZodType<
  SendSmsRequest$Outbound,
  z.ZodTypeDef,
  SendSmsRequest
> = z.object({
  companyId: z.string().optional(),
  requestBody: z.lazy(() => SendSmsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendSmsRequest$ {
  /** @deprecated use `SendSmsRequest$inboundSchema` instead. */
  export const inboundSchema = SendSmsRequest$inboundSchema;
  /** @deprecated use `SendSmsRequest$outboundSchema` instead. */
  export const outboundSchema = SendSmsRequest$outboundSchema;
  /** @deprecated use `SendSmsRequest$Outbound` instead. */
  export type Outbound = SendSmsRequest$Outbound;
}
