/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListWebhooksGlobals = {
  companyId?: string | undefined;
};

export type ListWebhooksRequest = {
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

export const ListWebhooksEventTypes = {
  AppointmentScheduled: "appointment.scheduled",
  AppointmentRescheduled: "appointment.rescheduled",
  AppointmentNoshowed: "appointment.noshowed",
  AppointmentCanceled: "appointment.canceled",
  CheckinCreated: "checkin.created",
  CheckinUpdated: "checkin.updated",
  CheckinDeleted: "checkin.deleted",
  ClassCancelled: "class.cancelled",
  CustomerCreated: "customer.created",
  CustomerUpdated: "customer.updated",
  CustomerDeleted: "customer.deleted",
  EnrollmentCreated: "enrollment.created",
  EnrollmentStatusChanged: "enrollment.status.changed",
  MemberappUpdated: "memberapp.updated",
  ReservationCreated: "reservation.created",
  ReservationWaitlisted: "reservation.waitlisted",
  ReservationCancelled: "reservation.cancelled",
  ReservationNoshowed: "reservation.noshowed",
  AppInstalled: "app.installed",
  AppUninstalled: "app.uninstalled",
} as const;
export type ListWebhooksEventTypes = ClosedEnum<typeof ListWebhooksEventTypes>;

export type ListWebhooksData = {
  /**
   * A unique identifier for the webhook
   */
  id: string;
  /**
   * The endpoint URL that will receive the webhook payloads
   */
  url: string;
  /**
   * The app ID with which application lifecyle event types (e.g. app.installed) are associated
   */
  appId?: string | undefined;
  /**
   * A list of event types that the webhook is subscribed to
   */
  eventTypes: Array<ListWebhooksEventTypes>;
  /**
   * Indicates whether the webhook is currently active and receiving events
   */
  active?: boolean | undefined;
  /**
   * A secret key used to sign the webhook payloads for security purposes
   */
  signingSecret: string;
};

/**
 * Default Response
 */
export type ListWebhooksResponseBody = {
  data: Array<ListWebhooksData>;
};

/** @internal */
export const ListWebhooksGlobals$inboundSchema: z.ZodType<
  ListWebhooksGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListWebhooksGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListWebhooksGlobals$outboundSchema: z.ZodType<
  ListWebhooksGlobals$Outbound,
  z.ZodTypeDef,
  ListWebhooksGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksGlobals$ {
  /** @deprecated use `ListWebhooksGlobals$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksGlobals$inboundSchema;
  /** @deprecated use `ListWebhooksGlobals$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksGlobals$outboundSchema;
  /** @deprecated use `ListWebhooksGlobals$Outbound` instead. */
  export type Outbound = ListWebhooksGlobals$Outbound;
}

export function listWebhooksGlobalsToJSON(
  listWebhooksGlobals: ListWebhooksGlobals,
): string {
  return JSON.stringify(
    ListWebhooksGlobals$outboundSchema.parse(listWebhooksGlobals),
  );
}

export function listWebhooksGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhooksGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhooksGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhooksGlobals' from JSON`,
  );
}

/** @internal */
export const ListWebhooksRequest$inboundSchema: z.ZodType<
  ListWebhooksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListWebhooksRequest$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListWebhooksRequest$outboundSchema: z.ZodType<
  ListWebhooksRequest$Outbound,
  z.ZodTypeDef,
  ListWebhooksRequest
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksRequest$ {
  /** @deprecated use `ListWebhooksRequest$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksRequest$inboundSchema;
  /** @deprecated use `ListWebhooksRequest$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksRequest$outboundSchema;
  /** @deprecated use `ListWebhooksRequest$Outbound` instead. */
  export type Outbound = ListWebhooksRequest$Outbound;
}

export function listWebhooksRequestToJSON(
  listWebhooksRequest: ListWebhooksRequest,
): string {
  return JSON.stringify(
    ListWebhooksRequest$outboundSchema.parse(listWebhooksRequest),
  );
}

export function listWebhooksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhooksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhooksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhooksRequest' from JSON`,
  );
}

/** @internal */
export const ListWebhooksEventTypes$inboundSchema: z.ZodNativeEnum<
  typeof ListWebhooksEventTypes
> = z.nativeEnum(ListWebhooksEventTypes);

/** @internal */
export const ListWebhooksEventTypes$outboundSchema: z.ZodNativeEnum<
  typeof ListWebhooksEventTypes
> = ListWebhooksEventTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksEventTypes$ {
  /** @deprecated use `ListWebhooksEventTypes$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksEventTypes$inboundSchema;
  /** @deprecated use `ListWebhooksEventTypes$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksEventTypes$outboundSchema;
}

/** @internal */
export const ListWebhooksData$inboundSchema: z.ZodType<
  ListWebhooksData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  url: z.string(),
  appId: z.string().optional(),
  eventTypes: z.array(ListWebhooksEventTypes$inboundSchema),
  active: z.boolean().default(true),
  signingSecret: z.string(),
});

/** @internal */
export type ListWebhooksData$Outbound = {
  id: string;
  url: string;
  appId?: string | undefined;
  eventTypes: Array<string>;
  active: boolean;
  signingSecret: string;
};

/** @internal */
export const ListWebhooksData$outboundSchema: z.ZodType<
  ListWebhooksData$Outbound,
  z.ZodTypeDef,
  ListWebhooksData
> = z.object({
  id: z.string(),
  url: z.string(),
  appId: z.string().optional(),
  eventTypes: z.array(ListWebhooksEventTypes$outboundSchema),
  active: z.boolean().default(true),
  signingSecret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksData$ {
  /** @deprecated use `ListWebhooksData$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksData$inboundSchema;
  /** @deprecated use `ListWebhooksData$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksData$outboundSchema;
  /** @deprecated use `ListWebhooksData$Outbound` instead. */
  export type Outbound = ListWebhooksData$Outbound;
}

export function listWebhooksDataToJSON(
  listWebhooksData: ListWebhooksData,
): string {
  return JSON.stringify(
    ListWebhooksData$outboundSchema.parse(listWebhooksData),
  );
}

export function listWebhooksDataFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhooksData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhooksData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhooksData' from JSON`,
  );
}

/** @internal */
export const ListWebhooksResponseBody$inboundSchema: z.ZodType<
  ListWebhooksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ListWebhooksData$inboundSchema)),
});

/** @internal */
export type ListWebhooksResponseBody$Outbound = {
  data: Array<ListWebhooksData$Outbound>;
};

/** @internal */
export const ListWebhooksResponseBody$outboundSchema: z.ZodType<
  ListWebhooksResponseBody$Outbound,
  z.ZodTypeDef,
  ListWebhooksResponseBody
> = z.object({
  data: z.array(z.lazy(() => ListWebhooksData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksResponseBody$ {
  /** @deprecated use `ListWebhooksResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksResponseBody$inboundSchema;
  /** @deprecated use `ListWebhooksResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksResponseBody$outboundSchema;
  /** @deprecated use `ListWebhooksResponseBody$Outbound` instead. */
  export type Outbound = ListWebhooksResponseBody$Outbound;
}

export function listWebhooksResponseBodyToJSON(
  listWebhooksResponseBody: ListWebhooksResponseBody,
): string {
  return JSON.stringify(
    ListWebhooksResponseBody$outboundSchema.parse(listWebhooksResponseBody),
  );
}

export function listWebhooksResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhooksResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhooksResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhooksResponseBody' from JSON`,
  );
}
