/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAppointmentGlobals = {
  companyId?: string | undefined;
};

export type GetAppointmentRequest = {
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/** @internal */
export const GetAppointmentGlobals$inboundSchema: z.ZodType<
  GetAppointmentGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetAppointmentGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetAppointmentGlobals$outboundSchema: z.ZodType<
  GetAppointmentGlobals$Outbound,
  z.ZodTypeDef,
  GetAppointmentGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAppointmentGlobals$ {
  /** @deprecated use `GetAppointmentGlobals$inboundSchema` instead. */
  export const inboundSchema = GetAppointmentGlobals$inboundSchema;
  /** @deprecated use `GetAppointmentGlobals$outboundSchema` instead. */
  export const outboundSchema = GetAppointmentGlobals$outboundSchema;
  /** @deprecated use `GetAppointmentGlobals$Outbound` instead. */
  export type Outbound = GetAppointmentGlobals$Outbound;
}

export function getAppointmentGlobalsToJSON(
  getAppointmentGlobals: GetAppointmentGlobals,
): string {
  return JSON.stringify(
    GetAppointmentGlobals$outboundSchema.parse(getAppointmentGlobals),
  );
}

export function getAppointmentGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetAppointmentGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAppointmentGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAppointmentGlobals' from JSON`,
  );
}

/** @internal */
export const GetAppointmentRequest$inboundSchema: z.ZodType<
  GetAppointmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetAppointmentRequest$Outbound = {
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetAppointmentRequest$outboundSchema: z.ZodType<
  GetAppointmentRequest$Outbound,
  z.ZodTypeDef,
  GetAppointmentRequest
> = z.object({
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAppointmentRequest$ {
  /** @deprecated use `GetAppointmentRequest$inboundSchema` instead. */
  export const inboundSchema = GetAppointmentRequest$inboundSchema;
  /** @deprecated use `GetAppointmentRequest$outboundSchema` instead. */
  export const outboundSchema = GetAppointmentRequest$outboundSchema;
  /** @deprecated use `GetAppointmentRequest$Outbound` instead. */
  export type Outbound = GetAppointmentRequest$Outbound;
}

export function getAppointmentRequestToJSON(
  getAppointmentRequest: GetAppointmentRequest,
): string {
  return JSON.stringify(
    GetAppointmentRequest$outboundSchema.parse(getAppointmentRequest),
  );
}

export function getAppointmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAppointmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAppointmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAppointmentRequest' from JSON`,
  );
}
