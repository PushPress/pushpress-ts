/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListInvitationsGlobals = {
  companyId?: string | undefined;
};

export type ListInvitationsRequest = {
  /**
   * page number
   */
  page?: number | undefined;
  /**
   * limit
   */
  limit?: number | undefined;
  eventId: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

export type ListInvitationsData = {
  resultArray: Array<components.Invitation>;
};

/**
 * Default Response
 */
export type ListInvitationsResponseBody = {
  data: ListInvitationsData;
};

export type ListInvitationsResponse = {
  result: ListInvitationsResponseBody;
};

/** @internal */
export const ListInvitationsGlobals$inboundSchema: z.ZodType<
  ListInvitationsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListInvitationsGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListInvitationsGlobals$outboundSchema: z.ZodType<
  ListInvitationsGlobals$Outbound,
  z.ZodTypeDef,
  ListInvitationsGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvitationsGlobals$ {
  /** @deprecated use `ListInvitationsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListInvitationsGlobals$inboundSchema;
  /** @deprecated use `ListInvitationsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListInvitationsGlobals$outboundSchema;
  /** @deprecated use `ListInvitationsGlobals$Outbound` instead. */
  export type Outbound = ListInvitationsGlobals$Outbound;
}

export function listInvitationsGlobalsToJSON(
  listInvitationsGlobals: ListInvitationsGlobals,
): string {
  return JSON.stringify(
    ListInvitationsGlobals$outboundSchema.parse(listInvitationsGlobals),
  );
}

export function listInvitationsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListInvitationsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvitationsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvitationsGlobals' from JSON`,
  );
}

/** @internal */
export const ListInvitationsRequest$inboundSchema: z.ZodType<
  ListInvitationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  eventId: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListInvitationsRequest$Outbound = {
  page: number;
  limit: number;
  eventId: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const ListInvitationsRequest$outboundSchema: z.ZodType<
  ListInvitationsRequest$Outbound,
  z.ZodTypeDef,
  ListInvitationsRequest
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  eventId: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvitationsRequest$ {
  /** @deprecated use `ListInvitationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListInvitationsRequest$inboundSchema;
  /** @deprecated use `ListInvitationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListInvitationsRequest$outboundSchema;
  /** @deprecated use `ListInvitationsRequest$Outbound` instead. */
  export type Outbound = ListInvitationsRequest$Outbound;
}

export function listInvitationsRequestToJSON(
  listInvitationsRequest: ListInvitationsRequest,
): string {
  return JSON.stringify(
    ListInvitationsRequest$outboundSchema.parse(listInvitationsRequest),
  );
}

export function listInvitationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInvitationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvitationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvitationsRequest' from JSON`,
  );
}

/** @internal */
export const ListInvitationsData$inboundSchema: z.ZodType<
  ListInvitationsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultArray: z.array(components.Invitation$inboundSchema),
});

/** @internal */
export type ListInvitationsData$Outbound = {
  resultArray: Array<components.Invitation$Outbound>;
};

/** @internal */
export const ListInvitationsData$outboundSchema: z.ZodType<
  ListInvitationsData$Outbound,
  z.ZodTypeDef,
  ListInvitationsData
> = z.object({
  resultArray: z.array(components.Invitation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvitationsData$ {
  /** @deprecated use `ListInvitationsData$inboundSchema` instead. */
  export const inboundSchema = ListInvitationsData$inboundSchema;
  /** @deprecated use `ListInvitationsData$outboundSchema` instead. */
  export const outboundSchema = ListInvitationsData$outboundSchema;
  /** @deprecated use `ListInvitationsData$Outbound` instead. */
  export type Outbound = ListInvitationsData$Outbound;
}

export function listInvitationsDataToJSON(
  listInvitationsData: ListInvitationsData,
): string {
  return JSON.stringify(
    ListInvitationsData$outboundSchema.parse(listInvitationsData),
  );
}

export function listInvitationsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListInvitationsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvitationsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvitationsData' from JSON`,
  );
}

/** @internal */
export const ListInvitationsResponseBody$inboundSchema: z.ZodType<
  ListInvitationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ListInvitationsData$inboundSchema),
});

/** @internal */
export type ListInvitationsResponseBody$Outbound = {
  data: ListInvitationsData$Outbound;
};

/** @internal */
export const ListInvitationsResponseBody$outboundSchema: z.ZodType<
  ListInvitationsResponseBody$Outbound,
  z.ZodTypeDef,
  ListInvitationsResponseBody
> = z.object({
  data: z.lazy(() => ListInvitationsData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvitationsResponseBody$ {
  /** @deprecated use `ListInvitationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListInvitationsResponseBody$inboundSchema;
  /** @deprecated use `ListInvitationsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListInvitationsResponseBody$outboundSchema;
  /** @deprecated use `ListInvitationsResponseBody$Outbound` instead. */
  export type Outbound = ListInvitationsResponseBody$Outbound;
}

export function listInvitationsResponseBodyToJSON(
  listInvitationsResponseBody: ListInvitationsResponseBody,
): string {
  return JSON.stringify(
    ListInvitationsResponseBody$outboundSchema.parse(
      listInvitationsResponseBody,
    ),
  );
}

export function listInvitationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListInvitationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvitationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvitationsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListInvitationsResponse$inboundSchema: z.ZodType<
  ListInvitationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListInvitationsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListInvitationsResponse$Outbound = {
  Result: ListInvitationsResponseBody$Outbound;
};

/** @internal */
export const ListInvitationsResponse$outboundSchema: z.ZodType<
  ListInvitationsResponse$Outbound,
  z.ZodTypeDef,
  ListInvitationsResponse
> = z.object({
  result: z.lazy(() => ListInvitationsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvitationsResponse$ {
  /** @deprecated use `ListInvitationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListInvitationsResponse$inboundSchema;
  /** @deprecated use `ListInvitationsResponse$outboundSchema` instead. */
  export const outboundSchema = ListInvitationsResponse$outboundSchema;
  /** @deprecated use `ListInvitationsResponse$Outbound` instead. */
  export type Outbound = ListInvitationsResponse$Outbound;
}

export function listInvitationsResponseToJSON(
  listInvitationsResponse: ListInvitationsResponse,
): string {
  return JSON.stringify(
    ListInvitationsResponse$outboundSchema.parse(listInvitationsResponse),
  );
}

export function listInvitationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListInvitationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInvitationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInvitationsResponse' from JSON`,
  );
}
