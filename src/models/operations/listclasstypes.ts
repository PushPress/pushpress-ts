/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListClassTypesGlobals = {
  companyId?: string | undefined;
};

export type ListClassTypesRequest = {
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

export type ListClassTypesResultArray = {
  /**
   * Unique identifier for the class type
   */
  id: string;
  /**
   * Unique identifier for the company the class type is in
   */
  companyId: string;
  /**
   * Name of the class type
   */
  name: string;
  /**
   * Hex code of color associated with the class type
   */
  color?: string | null | undefined;
  /**
   * Description of the class type
   */
  description?: string | null | undefined;
  /**
   * Whether the class type is active and can be selected for a class
   */
  active: boolean;
};

export type ListClassTypesData = {
  resultArray: Array<ListClassTypesResultArray>;
};

/**
 * Default Response
 */
export type ListClassTypesResponseBody = {
  data: ListClassTypesData;
};

/** @internal */
export const ListClassTypesGlobals$inboundSchema: z.ZodType<
  ListClassTypesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListClassTypesGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListClassTypesGlobals$outboundSchema: z.ZodType<
  ListClassTypesGlobals$Outbound,
  z.ZodTypeDef,
  ListClassTypesGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClassTypesGlobals$ {
  /** @deprecated use `ListClassTypesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListClassTypesGlobals$inboundSchema;
  /** @deprecated use `ListClassTypesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListClassTypesGlobals$outboundSchema;
  /** @deprecated use `ListClassTypesGlobals$Outbound` instead. */
  export type Outbound = ListClassTypesGlobals$Outbound;
}

export function listClassTypesGlobalsToJSON(
  listClassTypesGlobals: ListClassTypesGlobals,
): string {
  return JSON.stringify(
    ListClassTypesGlobals$outboundSchema.parse(listClassTypesGlobals),
  );
}

export function listClassTypesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListClassTypesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClassTypesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClassTypesGlobals' from JSON`,
  );
}

/** @internal */
export const ListClassTypesRequest$inboundSchema: z.ZodType<
  ListClassTypesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListClassTypesRequest$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListClassTypesRequest$outboundSchema: z.ZodType<
  ListClassTypesRequest$Outbound,
  z.ZodTypeDef,
  ListClassTypesRequest
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClassTypesRequest$ {
  /** @deprecated use `ListClassTypesRequest$inboundSchema` instead. */
  export const inboundSchema = ListClassTypesRequest$inboundSchema;
  /** @deprecated use `ListClassTypesRequest$outboundSchema` instead. */
  export const outboundSchema = ListClassTypesRequest$outboundSchema;
  /** @deprecated use `ListClassTypesRequest$Outbound` instead. */
  export type Outbound = ListClassTypesRequest$Outbound;
}

export function listClassTypesRequestToJSON(
  listClassTypesRequest: ListClassTypesRequest,
): string {
  return JSON.stringify(
    ListClassTypesRequest$outboundSchema.parse(listClassTypesRequest),
  );
}

export function listClassTypesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListClassTypesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClassTypesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClassTypesRequest' from JSON`,
  );
}

/** @internal */
export const ListClassTypesResultArray$inboundSchema: z.ZodType<
  ListClassTypesResultArray,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  companyId: z.string(),
  name: z.string(),
  color: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  active: z.boolean(),
});

/** @internal */
export type ListClassTypesResultArray$Outbound = {
  id: string;
  companyId: string;
  name: string;
  color?: string | null | undefined;
  description?: string | null | undefined;
  active: boolean;
};

/** @internal */
export const ListClassTypesResultArray$outboundSchema: z.ZodType<
  ListClassTypesResultArray$Outbound,
  z.ZodTypeDef,
  ListClassTypesResultArray
> = z.object({
  id: z.string(),
  companyId: z.string(),
  name: z.string(),
  color: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  active: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClassTypesResultArray$ {
  /** @deprecated use `ListClassTypesResultArray$inboundSchema` instead. */
  export const inboundSchema = ListClassTypesResultArray$inboundSchema;
  /** @deprecated use `ListClassTypesResultArray$outboundSchema` instead. */
  export const outboundSchema = ListClassTypesResultArray$outboundSchema;
  /** @deprecated use `ListClassTypesResultArray$Outbound` instead. */
  export type Outbound = ListClassTypesResultArray$Outbound;
}

export function listClassTypesResultArrayToJSON(
  listClassTypesResultArray: ListClassTypesResultArray,
): string {
  return JSON.stringify(
    ListClassTypesResultArray$outboundSchema.parse(listClassTypesResultArray),
  );
}

export function listClassTypesResultArrayFromJSON(
  jsonString: string,
): SafeParseResult<ListClassTypesResultArray, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClassTypesResultArray$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClassTypesResultArray' from JSON`,
  );
}

/** @internal */
export const ListClassTypesData$inboundSchema: z.ZodType<
  ListClassTypesData,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultArray: z.array(z.lazy(() => ListClassTypesResultArray$inboundSchema)),
});

/** @internal */
export type ListClassTypesData$Outbound = {
  resultArray: Array<ListClassTypesResultArray$Outbound>;
};

/** @internal */
export const ListClassTypesData$outboundSchema: z.ZodType<
  ListClassTypesData$Outbound,
  z.ZodTypeDef,
  ListClassTypesData
> = z.object({
  resultArray: z.array(z.lazy(() => ListClassTypesResultArray$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClassTypesData$ {
  /** @deprecated use `ListClassTypesData$inboundSchema` instead. */
  export const inboundSchema = ListClassTypesData$inboundSchema;
  /** @deprecated use `ListClassTypesData$outboundSchema` instead. */
  export const outboundSchema = ListClassTypesData$outboundSchema;
  /** @deprecated use `ListClassTypesData$Outbound` instead. */
  export type Outbound = ListClassTypesData$Outbound;
}

export function listClassTypesDataToJSON(
  listClassTypesData: ListClassTypesData,
): string {
  return JSON.stringify(
    ListClassTypesData$outboundSchema.parse(listClassTypesData),
  );
}

export function listClassTypesDataFromJSON(
  jsonString: string,
): SafeParseResult<ListClassTypesData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClassTypesData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClassTypesData' from JSON`,
  );
}

/** @internal */
export const ListClassTypesResponseBody$inboundSchema: z.ZodType<
  ListClassTypesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ListClassTypesData$inboundSchema),
});

/** @internal */
export type ListClassTypesResponseBody$Outbound = {
  data: ListClassTypesData$Outbound;
};

/** @internal */
export const ListClassTypesResponseBody$outboundSchema: z.ZodType<
  ListClassTypesResponseBody$Outbound,
  z.ZodTypeDef,
  ListClassTypesResponseBody
> = z.object({
  data: z.lazy(() => ListClassTypesData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListClassTypesResponseBody$ {
  /** @deprecated use `ListClassTypesResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListClassTypesResponseBody$inboundSchema;
  /** @deprecated use `ListClassTypesResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListClassTypesResponseBody$outboundSchema;
  /** @deprecated use `ListClassTypesResponseBody$Outbound` instead. */
  export type Outbound = ListClassTypesResponseBody$Outbound;
}

export function listClassTypesResponseBodyToJSON(
  listClassTypesResponseBody: ListClassTypesResponseBody,
): string {
  return JSON.stringify(
    ListClassTypesResponseBody$outboundSchema.parse(listClassTypesResponseBody),
  );
}

export function listClassTypesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListClassTypesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListClassTypesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListClassTypesResponseBody' from JSON`,
  );
}
