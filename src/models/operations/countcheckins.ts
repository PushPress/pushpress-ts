/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CountCheckinsGlobals = {
  companyId?: string | undefined;
};

/**
 * When defined only include checkins for these categories
 */
export const Include = {
  Classes: "classes",
  Events: "events",
  Appointments: "appointments",
  Open: "open",
} as const;
/**
 * When defined only include checkins for these categories
 */
export type Include = ClosedEnum<typeof Include>;

/**
 * When defined only include sub categories of classes/appointments/events with this type
 */
export type QueryParamType = string | Array<string>;

export type CountCheckinsRequest = {
  /**
   * When defined only include checkins for these categories
   */
  include?: Include | undefined;
  /**
   * When defined only include sub categories of classes/appointments/events with this type
   */
  type?: string | Array<string> | undefined;
  customer?: string | undefined;
  /**
   * Checkins before this unix timestamp
   */
  before?: number | undefined;
  /**
   * Checkins after this unix timestamp
   */
  after?: number | undefined;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/**
 * Default Response
 */
export type CountCheckinsResponseBody = {
  count: number;
};

/** @internal */
export const CountCheckinsGlobals$inboundSchema: z.ZodType<
  CountCheckinsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type CountCheckinsGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const CountCheckinsGlobals$outboundSchema: z.ZodType<
  CountCheckinsGlobals$Outbound,
  z.ZodTypeDef,
  CountCheckinsGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCheckinsGlobals$ {
  /** @deprecated use `CountCheckinsGlobals$inboundSchema` instead. */
  export const inboundSchema = CountCheckinsGlobals$inboundSchema;
  /** @deprecated use `CountCheckinsGlobals$outboundSchema` instead. */
  export const outboundSchema = CountCheckinsGlobals$outboundSchema;
  /** @deprecated use `CountCheckinsGlobals$Outbound` instead. */
  export type Outbound = CountCheckinsGlobals$Outbound;
}

export function countCheckinsGlobalsToJSON(
  countCheckinsGlobals: CountCheckinsGlobals,
): string {
  return JSON.stringify(
    CountCheckinsGlobals$outboundSchema.parse(countCheckinsGlobals),
  );
}

export function countCheckinsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CountCheckinsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCheckinsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCheckinsGlobals' from JSON`,
  );
}

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const QueryParamType$inboundSchema: z.ZodType<
  QueryParamType,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamType$Outbound = string | Array<string>;

/** @internal */
export const QueryParamType$outboundSchema: z.ZodType<
  QueryParamType$Outbound,
  z.ZodTypeDef,
  QueryParamType
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamType$ {
  /** @deprecated use `QueryParamType$inboundSchema` instead. */
  export const inboundSchema = QueryParamType$inboundSchema;
  /** @deprecated use `QueryParamType$outboundSchema` instead. */
  export const outboundSchema = QueryParamType$outboundSchema;
  /** @deprecated use `QueryParamType$Outbound` instead. */
  export type Outbound = QueryParamType$Outbound;
}

export function queryParamTypeToJSON(queryParamType: QueryParamType): string {
  return JSON.stringify(QueryParamType$outboundSchema.parse(queryParamType));
}

export function queryParamTypeFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamType' from JSON`,
  );
}

/** @internal */
export const CountCheckinsRequest$inboundSchema: z.ZodType<
  CountCheckinsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  include: Include$inboundSchema.optional(),
  type: z.union([z.string(), z.array(z.string())]).optional(),
  customer: z.string().optional(),
  before: z.number().optional(),
  after: z.number().optional(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type CountCheckinsRequest$Outbound = {
  include?: string | undefined;
  type?: string | Array<string> | undefined;
  customer?: string | undefined;
  before?: number | undefined;
  after?: number | undefined;
  "company-id"?: string | undefined;
};

/** @internal */
export const CountCheckinsRequest$outboundSchema: z.ZodType<
  CountCheckinsRequest$Outbound,
  z.ZodTypeDef,
  CountCheckinsRequest
> = z.object({
  include: Include$outboundSchema.optional(),
  type: z.union([z.string(), z.array(z.string())]).optional(),
  customer: z.string().optional(),
  before: z.number().optional(),
  after: z.number().optional(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCheckinsRequest$ {
  /** @deprecated use `CountCheckinsRequest$inboundSchema` instead. */
  export const inboundSchema = CountCheckinsRequest$inboundSchema;
  /** @deprecated use `CountCheckinsRequest$outboundSchema` instead. */
  export const outboundSchema = CountCheckinsRequest$outboundSchema;
  /** @deprecated use `CountCheckinsRequest$Outbound` instead. */
  export type Outbound = CountCheckinsRequest$Outbound;
}

export function countCheckinsRequestToJSON(
  countCheckinsRequest: CountCheckinsRequest,
): string {
  return JSON.stringify(
    CountCheckinsRequest$outboundSchema.parse(countCheckinsRequest),
  );
}

export function countCheckinsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CountCheckinsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCheckinsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCheckinsRequest' from JSON`,
  );
}

/** @internal */
export const CountCheckinsResponseBody$inboundSchema: z.ZodType<
  CountCheckinsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
});

/** @internal */
export type CountCheckinsResponseBody$Outbound = {
  count: number;
};

/** @internal */
export const CountCheckinsResponseBody$outboundSchema: z.ZodType<
  CountCheckinsResponseBody$Outbound,
  z.ZodTypeDef,
  CountCheckinsResponseBody
> = z.object({
  count: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCheckinsResponseBody$ {
  /** @deprecated use `CountCheckinsResponseBody$inboundSchema` instead. */
  export const inboundSchema = CountCheckinsResponseBody$inboundSchema;
  /** @deprecated use `CountCheckinsResponseBody$outboundSchema` instead. */
  export const outboundSchema = CountCheckinsResponseBody$outboundSchema;
  /** @deprecated use `CountCheckinsResponseBody$Outbound` instead. */
  export type Outbound = CountCheckinsResponseBody$Outbound;
}

export function countCheckinsResponseBodyToJSON(
  countCheckinsResponseBody: CountCheckinsResponseBody,
): string {
  return JSON.stringify(
    CountCheckinsResponseBody$outboundSchema.parse(countCheckinsResponseBody),
  );
}

export function countCheckinsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CountCheckinsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCheckinsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCheckinsResponseBody' from JSON`,
  );
}
