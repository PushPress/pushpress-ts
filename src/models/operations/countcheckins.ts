/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CountCheckinsGlobals = {
  companyId?: string | undefined;
};

export const CountCheckinsSessionQueryParamInclude = {
  Open: "open",
} as const;
export type CountCheckinsSessionQueryParamInclude = ClosedEnum<
  typeof CountCheckinsSessionQueryParamInclude
>;

export type Four = {
  include: CountCheckinsSessionQueryParamInclude;
};

export const SessionQueryParamInclude = {
  Appointments: "appointments",
} as const;
export type SessionQueryParamInclude = ClosedEnum<
  typeof SessionQueryParamInclude
>;

export type Three = {
  include: SessionQueryParamInclude;
  type?: string | null | undefined;
  session?: string | null | undefined;
};

export const QueryParamInclude = {
  Events: "events",
} as const;
export type QueryParamInclude = ClosedEnum<typeof QueryParamInclude>;

export type QueryParam2 = {
  include: QueryParamInclude;
  type?: string | null | undefined;
  session?: string | null | undefined;
};

export const Include = {
  Classes: "classes",
} as const;
export type Include = ClosedEnum<typeof Include>;

export type QueryParam1 = {
  include: Include;
  type?: string | null | undefined;
  session?: string | null | undefined;
};

/**
 * Filter for checkins for specific session kinds and optionally filter further on the type
 */
export type Session = Four | QueryParam1 | QueryParam2 | Three;

export type CountCheckinsRequest = {
  /**
   * Filter for checkins for specific session kinds and optionally filter further on the type
   */
  session?: Four | QueryParam1 | QueryParam2 | Three | undefined;
  customer?: string | undefined;
  /**
   * Checkins before this unix timestamp
   */
  before?: number | undefined;
  /**
   * Checkins after this unix timestamp
   */
  after?: number | undefined;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/**
 * Default Response
 */
export type CountCheckinsResponseBody = {
  count: number;
};

/** @internal */
export const CountCheckinsGlobals$inboundSchema: z.ZodType<
  CountCheckinsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type CountCheckinsGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const CountCheckinsGlobals$outboundSchema: z.ZodType<
  CountCheckinsGlobals$Outbound,
  z.ZodTypeDef,
  CountCheckinsGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCheckinsGlobals$ {
  /** @deprecated use `CountCheckinsGlobals$inboundSchema` instead. */
  export const inboundSchema = CountCheckinsGlobals$inboundSchema;
  /** @deprecated use `CountCheckinsGlobals$outboundSchema` instead. */
  export const outboundSchema = CountCheckinsGlobals$outboundSchema;
  /** @deprecated use `CountCheckinsGlobals$Outbound` instead. */
  export type Outbound = CountCheckinsGlobals$Outbound;
}

export function countCheckinsGlobalsToJSON(
  countCheckinsGlobals: CountCheckinsGlobals,
): string {
  return JSON.stringify(
    CountCheckinsGlobals$outboundSchema.parse(countCheckinsGlobals),
  );
}

export function countCheckinsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CountCheckinsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCheckinsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCheckinsGlobals' from JSON`,
  );
}

/** @internal */
export const CountCheckinsSessionQueryParamInclude$inboundSchema:
  z.ZodNativeEnum<typeof CountCheckinsSessionQueryParamInclude> = z.nativeEnum(
    CountCheckinsSessionQueryParamInclude,
  );

/** @internal */
export const CountCheckinsSessionQueryParamInclude$outboundSchema:
  z.ZodNativeEnum<typeof CountCheckinsSessionQueryParamInclude> =
    CountCheckinsSessionQueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCheckinsSessionQueryParamInclude$ {
  /** @deprecated use `CountCheckinsSessionQueryParamInclude$inboundSchema` instead. */
  export const inboundSchema =
    CountCheckinsSessionQueryParamInclude$inboundSchema;
  /** @deprecated use `CountCheckinsSessionQueryParamInclude$outboundSchema` instead. */
  export const outboundSchema =
    CountCheckinsSessionQueryParamInclude$outboundSchema;
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    include: CountCheckinsSessionQueryParamInclude$inboundSchema,
  });

/** @internal */
export type Four$Outbound = {
  include: string;
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    include: CountCheckinsSessionQueryParamInclude$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const SessionQueryParamInclude$inboundSchema: z.ZodNativeEnum<
  typeof SessionQueryParamInclude
> = z.nativeEnum(SessionQueryParamInclude);

/** @internal */
export const SessionQueryParamInclude$outboundSchema: z.ZodNativeEnum<
  typeof SessionQueryParamInclude
> = SessionQueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionQueryParamInclude$ {
  /** @deprecated use `SessionQueryParamInclude$inboundSchema` instead. */
  export const inboundSchema = SessionQueryParamInclude$inboundSchema;
  /** @deprecated use `SessionQueryParamInclude$outboundSchema` instead. */
  export const outboundSchema = SessionQueryParamInclude$outboundSchema;
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    include: SessionQueryParamInclude$inboundSchema,
    type: z.nullable(z.string()).optional(),
    session: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Three$Outbound = {
  include: string;
  type?: string | null | undefined;
  session?: string | null | undefined;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  include: SessionQueryParamInclude$outboundSchema,
  type: z.nullable(z.string()).optional(),
  session: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const QueryParamInclude$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamInclude
> = z.nativeEnum(QueryParamInclude);

/** @internal */
export const QueryParamInclude$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamInclude
> = QueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamInclude$ {
  /** @deprecated use `QueryParamInclude$inboundSchema` instead. */
  export const inboundSchema = QueryParamInclude$inboundSchema;
  /** @deprecated use `QueryParamInclude$outboundSchema` instead. */
  export const outboundSchema = QueryParamInclude$outboundSchema;
}

/** @internal */
export const QueryParam2$inboundSchema: z.ZodType<
  QueryParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  include: QueryParamInclude$inboundSchema,
  type: z.nullable(z.string()).optional(),
  session: z.nullable(z.string()).optional(),
});

/** @internal */
export type QueryParam2$Outbound = {
  include: string;
  type?: string | null | undefined;
  session?: string | null | undefined;
};

/** @internal */
export const QueryParam2$outboundSchema: z.ZodType<
  QueryParam2$Outbound,
  z.ZodTypeDef,
  QueryParam2
> = z.object({
  include: QueryParamInclude$outboundSchema,
  type: z.nullable(z.string()).optional(),
  session: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParam2$ {
  /** @deprecated use `QueryParam2$inboundSchema` instead. */
  export const inboundSchema = QueryParam2$inboundSchema;
  /** @deprecated use `QueryParam2$outboundSchema` instead. */
  export const outboundSchema = QueryParam2$outboundSchema;
  /** @deprecated use `QueryParam2$Outbound` instead. */
  export type Outbound = QueryParam2$Outbound;
}

export function queryParam2ToJSON(queryParam2: QueryParam2): string {
  return JSON.stringify(QueryParam2$outboundSchema.parse(queryParam2));
}

export function queryParam2FromJSON(
  jsonString: string,
): SafeParseResult<QueryParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParam2' from JSON`,
  );
}

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const QueryParam1$inboundSchema: z.ZodType<
  QueryParam1,
  z.ZodTypeDef,
  unknown
> = z.object({
  include: Include$inboundSchema,
  type: z.nullable(z.string()).optional(),
  session: z.nullable(z.string()).optional(),
});

/** @internal */
export type QueryParam1$Outbound = {
  include: string;
  type?: string | null | undefined;
  session?: string | null | undefined;
};

/** @internal */
export const QueryParam1$outboundSchema: z.ZodType<
  QueryParam1$Outbound,
  z.ZodTypeDef,
  QueryParam1
> = z.object({
  include: Include$outboundSchema,
  type: z.nullable(z.string()).optional(),
  session: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParam1$ {
  /** @deprecated use `QueryParam1$inboundSchema` instead. */
  export const inboundSchema = QueryParam1$inboundSchema;
  /** @deprecated use `QueryParam1$outboundSchema` instead. */
  export const outboundSchema = QueryParam1$outboundSchema;
  /** @deprecated use `QueryParam1$Outbound` instead. */
  export type Outbound = QueryParam1$Outbound;
}

export function queryParam1ToJSON(queryParam1: QueryParam1): string {
  return JSON.stringify(QueryParam1$outboundSchema.parse(queryParam1));
}

export function queryParam1FromJSON(
  jsonString: string,
): SafeParseResult<QueryParam1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParam1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParam1' from JSON`,
  );
}

/** @internal */
export const Session$inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => Four$inboundSchema),
    z.lazy(() => QueryParam1$inboundSchema),
    z.lazy(() => QueryParam2$inboundSchema),
    z.lazy(() => Three$inboundSchema),
  ]);

/** @internal */
export type Session$Outbound =
  | Four$Outbound
  | QueryParam1$Outbound
  | QueryParam2$Outbound
  | Three$Outbound;

/** @internal */
export const Session$outboundSchema: z.ZodType<
  Session$Outbound,
  z.ZodTypeDef,
  Session
> = z.union([
  z.lazy(() => Four$outboundSchema),
  z.lazy(() => QueryParam1$outboundSchema),
  z.lazy(() => QueryParam2$outboundSchema),
  z.lazy(() => Three$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Session$ {
  /** @deprecated use `Session$inboundSchema` instead. */
  export const inboundSchema = Session$inboundSchema;
  /** @deprecated use `Session$outboundSchema` instead. */
  export const outboundSchema = Session$outboundSchema;
  /** @deprecated use `Session$Outbound` instead. */
  export type Outbound = Session$Outbound;
}

export function sessionToJSON(session: Session): string {
  return JSON.stringify(Session$outboundSchema.parse(session));
}

export function sessionFromJSON(
  jsonString: string,
): SafeParseResult<Session, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Session$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Session' from JSON`,
  );
}

/** @internal */
export const CountCheckinsRequest$inboundSchema: z.ZodType<
  CountCheckinsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  session: z.union([
    z.lazy(() => Four$inboundSchema),
    z.lazy(() => QueryParam1$inboundSchema),
    z.lazy(() => QueryParam2$inboundSchema),
    z.lazy(() => Three$inboundSchema),
  ]).optional(),
  customer: z.string().optional(),
  before: z.number().optional(),
  after: z.number().optional(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type CountCheckinsRequest$Outbound = {
  session?:
    | Four$Outbound
    | QueryParam1$Outbound
    | QueryParam2$Outbound
    | Three$Outbound
    | undefined;
  customer?: string | undefined;
  before?: number | undefined;
  after?: number | undefined;
  "company-id"?: string | undefined;
};

/** @internal */
export const CountCheckinsRequest$outboundSchema: z.ZodType<
  CountCheckinsRequest$Outbound,
  z.ZodTypeDef,
  CountCheckinsRequest
> = z.object({
  session: z.union([
    z.lazy(() => Four$outboundSchema),
    z.lazy(() => QueryParam1$outboundSchema),
    z.lazy(() => QueryParam2$outboundSchema),
    z.lazy(() => Three$outboundSchema),
  ]).optional(),
  customer: z.string().optional(),
  before: z.number().optional(),
  after: z.number().optional(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCheckinsRequest$ {
  /** @deprecated use `CountCheckinsRequest$inboundSchema` instead. */
  export const inboundSchema = CountCheckinsRequest$inboundSchema;
  /** @deprecated use `CountCheckinsRequest$outboundSchema` instead. */
  export const outboundSchema = CountCheckinsRequest$outboundSchema;
  /** @deprecated use `CountCheckinsRequest$Outbound` instead. */
  export type Outbound = CountCheckinsRequest$Outbound;
}

export function countCheckinsRequestToJSON(
  countCheckinsRequest: CountCheckinsRequest,
): string {
  return JSON.stringify(
    CountCheckinsRequest$outboundSchema.parse(countCheckinsRequest),
  );
}

export function countCheckinsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CountCheckinsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCheckinsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCheckinsRequest' from JSON`,
  );
}

/** @internal */
export const CountCheckinsResponseBody$inboundSchema: z.ZodType<
  CountCheckinsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
});

/** @internal */
export type CountCheckinsResponseBody$Outbound = {
  count: number;
};

/** @internal */
export const CountCheckinsResponseBody$outboundSchema: z.ZodType<
  CountCheckinsResponseBody$Outbound,
  z.ZodTypeDef,
  CountCheckinsResponseBody
> = z.object({
  count: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCheckinsResponseBody$ {
  /** @deprecated use `CountCheckinsResponseBody$inboundSchema` instead. */
  export const inboundSchema = CountCheckinsResponseBody$inboundSchema;
  /** @deprecated use `CountCheckinsResponseBody$outboundSchema` instead. */
  export const outboundSchema = CountCheckinsResponseBody$outboundSchema;
  /** @deprecated use `CountCheckinsResponseBody$Outbound` instead. */
  export type Outbound = CountCheckinsResponseBody$Outbound;
}

export function countCheckinsResponseBodyToJSON(
  countCheckinsResponseBody: CountCheckinsResponseBody,
): string {
  return JSON.stringify(
    CountCheckinsResponseBody$outboundSchema.parse(countCheckinsResponseBody),
  );
}

export function countCheckinsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CountCheckinsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCheckinsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCheckinsResponseBody' from JSON`,
  );
}
