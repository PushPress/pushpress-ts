/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetClassTypeGlobals = {
  companyId?: string | undefined;
};

export type GetClassTypeRequest = {
  id: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

/**
 * Default Response
 */
export type GetClassTypeResponseBody = {
  /**
   * Unique identifier for the class type
   */
  id: string;
  /**
   * Unique identifier for the company the class type is in
   */
  companyId: string;
  /**
   * Name of the class type
   */
  name: string;
  /**
   * Hex code of color associated with the class type
   */
  color?: string | null | undefined;
  /**
   * Description of the class type
   */
  description?: string | null | undefined;
  /**
   * Whether the class type is active and can be selected for a class
   */
  active: boolean;
};

/** @internal */
export const GetClassTypeGlobals$inboundSchema: z.ZodType<
  GetClassTypeGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetClassTypeGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetClassTypeGlobals$outboundSchema: z.ZodType<
  GetClassTypeGlobals$Outbound,
  z.ZodTypeDef,
  GetClassTypeGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClassTypeGlobals$ {
  /** @deprecated use `GetClassTypeGlobals$inboundSchema` instead. */
  export const inboundSchema = GetClassTypeGlobals$inboundSchema;
  /** @deprecated use `GetClassTypeGlobals$outboundSchema` instead. */
  export const outboundSchema = GetClassTypeGlobals$outboundSchema;
  /** @deprecated use `GetClassTypeGlobals$Outbound` instead. */
  export type Outbound = GetClassTypeGlobals$Outbound;
}

export function getClassTypeGlobalsToJSON(
  getClassTypeGlobals: GetClassTypeGlobals,
): string {
  return JSON.stringify(
    GetClassTypeGlobals$outboundSchema.parse(getClassTypeGlobals),
  );
}

export function getClassTypeGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetClassTypeGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClassTypeGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClassTypeGlobals' from JSON`,
  );
}

/** @internal */
export const GetClassTypeRequest$inboundSchema: z.ZodType<
  GetClassTypeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetClassTypeRequest$Outbound = {
  id: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetClassTypeRequest$outboundSchema: z.ZodType<
  GetClassTypeRequest$Outbound,
  z.ZodTypeDef,
  GetClassTypeRequest
> = z.object({
  id: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClassTypeRequest$ {
  /** @deprecated use `GetClassTypeRequest$inboundSchema` instead. */
  export const inboundSchema = GetClassTypeRequest$inboundSchema;
  /** @deprecated use `GetClassTypeRequest$outboundSchema` instead. */
  export const outboundSchema = GetClassTypeRequest$outboundSchema;
  /** @deprecated use `GetClassTypeRequest$Outbound` instead. */
  export type Outbound = GetClassTypeRequest$Outbound;
}

export function getClassTypeRequestToJSON(
  getClassTypeRequest: GetClassTypeRequest,
): string {
  return JSON.stringify(
    GetClassTypeRequest$outboundSchema.parse(getClassTypeRequest),
  );
}

export function getClassTypeRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetClassTypeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClassTypeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClassTypeRequest' from JSON`,
  );
}

/** @internal */
export const GetClassTypeResponseBody$inboundSchema: z.ZodType<
  GetClassTypeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  companyId: z.string(),
  name: z.string(),
  color: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  active: z.boolean(),
});

/** @internal */
export type GetClassTypeResponseBody$Outbound = {
  id: string;
  companyId: string;
  name: string;
  color?: string | null | undefined;
  description?: string | null | undefined;
  active: boolean;
};

/** @internal */
export const GetClassTypeResponseBody$outboundSchema: z.ZodType<
  GetClassTypeResponseBody$Outbound,
  z.ZodTypeDef,
  GetClassTypeResponseBody
> = z.object({
  id: z.string(),
  companyId: z.string(),
  name: z.string(),
  color: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  active: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClassTypeResponseBody$ {
  /** @deprecated use `GetClassTypeResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetClassTypeResponseBody$inboundSchema;
  /** @deprecated use `GetClassTypeResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetClassTypeResponseBody$outboundSchema;
  /** @deprecated use `GetClassTypeResponseBody$Outbound` instead. */
  export type Outbound = GetClassTypeResponseBody$Outbound;
}

export function getClassTypeResponseBodyToJSON(
  getClassTypeResponseBody: GetClassTypeResponseBody,
): string {
  return JSON.stringify(
    GetClassTypeResponseBody$outboundSchema.parse(getClassTypeResponseBody),
  );
}

export function getClassTypeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetClassTypeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClassTypeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClassTypeResponseBody' from JSON`,
  );
}
