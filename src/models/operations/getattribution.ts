/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAttributionGlobals = {
  companyId?: string | undefined;
};

export type GetAttributionRequest = {
  uuid: string;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

export const GetAttributionEvent = {
  Signup: "signup",
  ClientSignup: "client_signup",
} as const;
export type GetAttributionEvent = ClosedEnum<typeof GetAttributionEvent>;

/**
 * Default Response
 */
export type GetAttributionResponseBody = {
  customerId: string;
  companyId: string;
  event: GetAttributionEvent;
  /**
   * The referer URL of the customer, industry accepted typo of referrer
   */
  referer?: string | null | undefined;
  utmSource?: string | null | undefined;
  utmMedium?: string | null | undefined;
  utmCampaign?: string | null | undefined;
  utmContent?: string | null | undefined;
  utmTerm?: string | null | undefined;
};

/** @internal */
export const GetAttributionGlobals$inboundSchema: z.ZodType<
  GetAttributionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetAttributionGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const GetAttributionGlobals$outboundSchema: z.ZodType<
  GetAttributionGlobals$Outbound,
  z.ZodTypeDef,
  GetAttributionGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttributionGlobals$ {
  /** @deprecated use `GetAttributionGlobals$inboundSchema` instead. */
  export const inboundSchema = GetAttributionGlobals$inboundSchema;
  /** @deprecated use `GetAttributionGlobals$outboundSchema` instead. */
  export const outboundSchema = GetAttributionGlobals$outboundSchema;
  /** @deprecated use `GetAttributionGlobals$Outbound` instead. */
  export type Outbound = GetAttributionGlobals$Outbound;
}

export function getAttributionGlobalsToJSON(
  getAttributionGlobals: GetAttributionGlobals,
): string {
  return JSON.stringify(
    GetAttributionGlobals$outboundSchema.parse(getAttributionGlobals),
  );
}

export function getAttributionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetAttributionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAttributionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAttributionGlobals' from JSON`,
  );
}

/** @internal */
export const GetAttributionRequest$inboundSchema: z.ZodType<
  GetAttributionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type GetAttributionRequest$Outbound = {
  uuid: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const GetAttributionRequest$outboundSchema: z.ZodType<
  GetAttributionRequest$Outbound,
  z.ZodTypeDef,
  GetAttributionRequest
> = z.object({
  uuid: z.string(),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttributionRequest$ {
  /** @deprecated use `GetAttributionRequest$inboundSchema` instead. */
  export const inboundSchema = GetAttributionRequest$inboundSchema;
  /** @deprecated use `GetAttributionRequest$outboundSchema` instead. */
  export const outboundSchema = GetAttributionRequest$outboundSchema;
  /** @deprecated use `GetAttributionRequest$Outbound` instead. */
  export type Outbound = GetAttributionRequest$Outbound;
}

export function getAttributionRequestToJSON(
  getAttributionRequest: GetAttributionRequest,
): string {
  return JSON.stringify(
    GetAttributionRequest$outboundSchema.parse(getAttributionRequest),
  );
}

export function getAttributionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAttributionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAttributionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAttributionRequest' from JSON`,
  );
}

/** @internal */
export const GetAttributionEvent$inboundSchema: z.ZodNativeEnum<
  typeof GetAttributionEvent
> = z.nativeEnum(GetAttributionEvent);

/** @internal */
export const GetAttributionEvent$outboundSchema: z.ZodNativeEnum<
  typeof GetAttributionEvent
> = GetAttributionEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttributionEvent$ {
  /** @deprecated use `GetAttributionEvent$inboundSchema` instead. */
  export const inboundSchema = GetAttributionEvent$inboundSchema;
  /** @deprecated use `GetAttributionEvent$outboundSchema` instead. */
  export const outboundSchema = GetAttributionEvent$outboundSchema;
}

/** @internal */
export const GetAttributionResponseBody$inboundSchema: z.ZodType<
  GetAttributionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string(),
  companyId: z.string(),
  event: GetAttributionEvent$inboundSchema,
  referer: z.nullable(z.string()).optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetAttributionResponseBody$Outbound = {
  customerId: string;
  companyId: string;
  event: string;
  referer?: string | null | undefined;
  utmSource?: string | null | undefined;
  utmMedium?: string | null | undefined;
  utmCampaign?: string | null | undefined;
  utmContent?: string | null | undefined;
  utmTerm?: string | null | undefined;
};

/** @internal */
export const GetAttributionResponseBody$outboundSchema: z.ZodType<
  GetAttributionResponseBody$Outbound,
  z.ZodTypeDef,
  GetAttributionResponseBody
> = z.object({
  customerId: z.string(),
  companyId: z.string(),
  event: GetAttributionEvent$outboundSchema,
  referer: z.nullable(z.string()).optional(),
  utmSource: z.nullable(z.string()).optional(),
  utmMedium: z.nullable(z.string()).optional(),
  utmCampaign: z.nullable(z.string()).optional(),
  utmContent: z.nullable(z.string()).optional(),
  utmTerm: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttributionResponseBody$ {
  /** @deprecated use `GetAttributionResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAttributionResponseBody$inboundSchema;
  /** @deprecated use `GetAttributionResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAttributionResponseBody$outboundSchema;
  /** @deprecated use `GetAttributionResponseBody$Outbound` instead. */
  export type Outbound = GetAttributionResponseBody$Outbound;
}

export function getAttributionResponseBodyToJSON(
  getAttributionResponseBody: GetAttributionResponseBody,
): string {
  return JSON.stringify(
    GetAttributionResponseBody$outboundSchema.parse(getAttributionResponseBody),
  );
}

export function getAttributionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAttributionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAttributionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAttributionResponseBody' from JSON`,
  );
}
