/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListEventsGlobals = {
  companyId?: string | undefined;
};

/**
 * Some events require an invitation for signup, most invites and all classes are open registration
 */
export const Access = {
  InviteOnly: "invite_only",
  Open: "open",
} as const;
/**
 * Some events require an invitation for signup, most invites and all classes are open registration
 */
export type Access = ClosedEnum<typeof Access>;

/**
 * sort events by start timestamp
 */
export const Order = {
  Ascending: "ascending",
  Descending: "descending",
} as const;
/**
 * sort events by start timestamp
 */
export type Order = ClosedEnum<typeof Order>;

export type ListEventsRequest = {
  /**
   * page number
   */
  page?: number | undefined;
  /**
   * limit
   */
  limit?: number | undefined;
  /**
   * Filter by events that start after this timestamp (Unix Seconds)
   */
  startsAfter?: number | undefined;
  /**
   * Some events require an invitation for signup, most invites and all classes are open registration
   */
  access?: Access | undefined;
  /**
   * sort events by start timestamp
   */
  order?: Order | undefined;
  /**
   * When using multitenant API keys, specify the company
   */
  companyId?: string | undefined;
};

export type ListEventsData = {
  resultArray: Array<components.Event>;
};

/**
 * Default Response
 */
export type ListEventsResponseBody = {
  data: ListEventsData;
};

export type ListEventsResponse = {
  result: ListEventsResponseBody;
};

/** @internal */
export const ListEventsGlobals$inboundSchema: z.ZodType<
  ListEventsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListEventsGlobals$Outbound = {
  "company-id"?: string | undefined;
};

/** @internal */
export const ListEventsGlobals$outboundSchema: z.ZodType<
  ListEventsGlobals$Outbound,
  z.ZodTypeDef,
  ListEventsGlobals
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsGlobals$ {
  /** @deprecated use `ListEventsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListEventsGlobals$inboundSchema;
  /** @deprecated use `ListEventsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListEventsGlobals$outboundSchema;
  /** @deprecated use `ListEventsGlobals$Outbound` instead. */
  export type Outbound = ListEventsGlobals$Outbound;
}

export function listEventsGlobalsToJSON(
  listEventsGlobals: ListEventsGlobals,
): string {
  return JSON.stringify(
    ListEventsGlobals$outboundSchema.parse(listEventsGlobals),
  );
}

export function listEventsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsGlobals' from JSON`,
  );
}

/** @internal */
export const Access$inboundSchema: z.ZodNativeEnum<typeof Access> = z
  .nativeEnum(Access);

/** @internal */
export const Access$outboundSchema: z.ZodNativeEnum<typeof Access> =
  Access$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Access$ {
  /** @deprecated use `Access$inboundSchema` instead. */
  export const inboundSchema = Access$inboundSchema;
  /** @deprecated use `Access$outboundSchema` instead. */
  export const outboundSchema = Access$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodNativeEnum<typeof Order> = z.nativeEnum(
  Order,
);

/** @internal */
export const Order$outboundSchema: z.ZodNativeEnum<typeof Order> =
  Order$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
}

/** @internal */
export const ListEventsRequest$inboundSchema: z.ZodType<
  ListEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  startsAfter: z.number().optional(),
  access: Access$inboundSchema.optional(),
  order: Order$inboundSchema.default("ascending"),
  "company-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company-id": "companyId",
  });
});

/** @internal */
export type ListEventsRequest$Outbound = {
  page: number;
  limit: number;
  startsAfter?: number | undefined;
  access?: string | undefined;
  order: string;
  "company-id"?: string | undefined;
};

/** @internal */
export const ListEventsRequest$outboundSchema: z.ZodType<
  ListEventsRequest$Outbound,
  z.ZodTypeDef,
  ListEventsRequest
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  startsAfter: z.number().optional(),
  access: Access$outboundSchema.optional(),
  order: Order$outboundSchema.default("ascending"),
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsRequest$ {
  /** @deprecated use `ListEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListEventsRequest$inboundSchema;
  /** @deprecated use `ListEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListEventsRequest$outboundSchema;
  /** @deprecated use `ListEventsRequest$Outbound` instead. */
  export type Outbound = ListEventsRequest$Outbound;
}

export function listEventsRequestToJSON(
  listEventsRequest: ListEventsRequest,
): string {
  return JSON.stringify(
    ListEventsRequest$outboundSchema.parse(listEventsRequest),
  );
}

export function listEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsRequest' from JSON`,
  );
}

/** @internal */
export const ListEventsData$inboundSchema: z.ZodType<
  ListEventsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultArray: z.array(components.Event$inboundSchema),
});

/** @internal */
export type ListEventsData$Outbound = {
  resultArray: Array<components.Event$Outbound>;
};

/** @internal */
export const ListEventsData$outboundSchema: z.ZodType<
  ListEventsData$Outbound,
  z.ZodTypeDef,
  ListEventsData
> = z.object({
  resultArray: z.array(components.Event$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsData$ {
  /** @deprecated use `ListEventsData$inboundSchema` instead. */
  export const inboundSchema = ListEventsData$inboundSchema;
  /** @deprecated use `ListEventsData$outboundSchema` instead. */
  export const outboundSchema = ListEventsData$outboundSchema;
  /** @deprecated use `ListEventsData$Outbound` instead. */
  export type Outbound = ListEventsData$Outbound;
}

export function listEventsDataToJSON(listEventsData: ListEventsData): string {
  return JSON.stringify(ListEventsData$outboundSchema.parse(listEventsData));
}

export function listEventsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsData' from JSON`,
  );
}

/** @internal */
export const ListEventsResponseBody$inboundSchema: z.ZodType<
  ListEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ListEventsData$inboundSchema),
});

/** @internal */
export type ListEventsResponseBody$Outbound = {
  data: ListEventsData$Outbound;
};

/** @internal */
export const ListEventsResponseBody$outboundSchema: z.ZodType<
  ListEventsResponseBody$Outbound,
  z.ZodTypeDef,
  ListEventsResponseBody
> = z.object({
  data: z.lazy(() => ListEventsData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsResponseBody$ {
  /** @deprecated use `ListEventsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListEventsResponseBody$inboundSchema;
  /** @deprecated use `ListEventsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListEventsResponseBody$outboundSchema;
  /** @deprecated use `ListEventsResponseBody$Outbound` instead. */
  export type Outbound = ListEventsResponseBody$Outbound;
}

export function listEventsResponseBodyToJSON(
  listEventsResponseBody: ListEventsResponseBody,
): string {
  return JSON.stringify(
    ListEventsResponseBody$outboundSchema.parse(listEventsResponseBody),
  );
}

export function listEventsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListEventsResponse$inboundSchema: z.ZodType<
  ListEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListEventsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListEventsResponse$Outbound = {
  Result: ListEventsResponseBody$Outbound;
};

/** @internal */
export const ListEventsResponse$outboundSchema: z.ZodType<
  ListEventsResponse$Outbound,
  z.ZodTypeDef,
  ListEventsResponse
> = z.object({
  result: z.lazy(() => ListEventsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsResponse$ {
  /** @deprecated use `ListEventsResponse$inboundSchema` instead. */
  export const inboundSchema = ListEventsResponse$inboundSchema;
  /** @deprecated use `ListEventsResponse$outboundSchema` instead. */
  export const outboundSchema = ListEventsResponse$outboundSchema;
  /** @deprecated use `ListEventsResponse$Outbound` instead. */
  export type Outbound = ListEventsResponse$Outbound;
}

export function listEventsResponseToJSON(
  listEventsResponse: ListEventsResponse,
): string {
  return JSON.stringify(
    ListEventsResponse$outboundSchema.parse(listEventsResponse),
  );
}

export function listEventsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsResponse' from JSON`,
  );
}
